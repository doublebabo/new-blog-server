/*
 Navicat Premium Data Transfer

 Source Server         : blog
 Source Server Type    : MySQL
 Source Server Version : 80027
 Source Host           : localhost:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 80027
 File Encoding         : 65001

 Date: 30/12/2021 22:29:46
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `author` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `abstract` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `content` longtext CHARACTER SET utf16 COLLATE utf16_general_ci,
  `comment_counts` int(0) DEFAULT 0,
  `category_id` int(0) DEFAULT NULL,
  `clicks` int(0) DEFAULT NULL,
  `draft` int(0) DEFAULT NULL,
  `update_time` datetime(0) DEFAULT NULL,
  `create_time` datetime(0) DEFAULT NULL,
  `deleted` int(0) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `arcticle_id_uindex`(`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 66 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES (1, '# React Router 6', 'qi-xiao-gu', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoic', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoices from \"./routes/invoices\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(\r\n  <BrowserRouter>\r\n    <Routes>\r\n      <Route path=\"/\" element={<App />} />\r\n      <Route path=\"invoices\" element={<Invoices />} />\r\n    </Routes>\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper!</h1>\r\n      {/*使用Link 进行路由跳转跳转*/}\r\n      <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Invoices() {\r\n  return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Invoices</h2>\r\n    </main>\r\n  );\r\n}\r\n```\r\n## 2.嵌套路由\r\n<Route>里面有<Route>,嵌套路由的实现做了两件事\r\n\r\n* 将routes嵌套在被嵌套route内\r\n* 渲染一个Outlet\r\n\r\n```jsx\r\nimport { Outlet, Link } from \"react-router-dom\";\r\n// 这里的App是一个Route\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper</h1>\r\n      <nav\r\n        style={{\r\n          borderBottom: \"solid 1px\",\r\n          paddingBottom: \"1rem\"\r\n        }}\r\n      >\r\n        <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n        <Link to=\"/expenses\">Expenses</Link>\r\n      </nav>\r\n      <Outlet /> {/*注意点*/}\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 3.路由传参&路由遍历\r\n\r\n```jsx\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n        {/*注意点见 👇*/}\r\n          <Link\r\n            style={{ display: \"block\", margin: \"1rem 0\" }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </Link>\r\n          {/*注意点见 👆*/}\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 4. 设置No Match 路由\r\n\r\n```jsx\r\n<Routes>\r\n  <Route path=\"/\" element={<App />}>\r\n    <Route path=\"expenses\" element={<Expenses />} />\r\n    <Route path=\"invoices\" element={<Invoices />} />\r\n    <Route\r\n      path=\"*\" {/*👈*/}\r\n      element={\r\n        <main style={{ padding: \"1rem\" }}>\r\n          <p>There\'s nothing here!</p>\r\n        </main>\r\n      }\r\n    />\r\n  </Route>\r\n</Routes>\r\n```\r\n\r\n## 5.读取URL参数\r\n\r\n使用**useParams()**\r\n\r\n```jsx\r\n// 跳转到invoice组件\r\n<Link\r\n    to={`/invoices/2312`}\r\n    key={invoice.number}\r\n    >\r\n    {invoice.name}\r\n</Link>\r\n```\r\n\r\n```jsx\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function Invoice() {\r\n  let params = useParams();  // 这边获取到2312\r\n  return <h2>Invoice: {params.invoiceId}</h2>; \r\n}\r\n```\r\n\r\n## 6. Index路由\r\n\r\n当**子路由**中没有一个能和url匹配时，将会走**index**这个子路由\r\n\r\n```jsx\r\n<Routes>\r\n    <Route path=\"/in\" element={<Home />}>\r\n        <Route\r\n            index {/*👈*/}\r\n            element={\r\n                <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>\r\n            }\r\n            />\r\n        <Route path=\":in\" element={<In />} />\r\n    </Route>\r\n    <Route\r\n        path=\"*\"\r\n        element={<NotFound/>}\r\n        />\r\n</Routes>\r\n```\r\n\r\n```jsx\r\nexport default function Home() {\r\n    return (\r\n        <h1>\r\n            Home\r\n            {/*url为/in时，outlet将渲染 <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>*/}\r\n            {/*url为/in/1234时，outlet将渲染 <In />*/}\r\n            <Outlet/>  {/*👈*/}\r\n        </h1>\r\n    );\r\n}\r\n```\r\n\r\n## 7.active Link\r\n常见的使用场景：导航栏\r\n如何使用：<NavLink>\r\n和<Link>的区别： NavLink可以接受isActive\r\n\r\n```jsx\r\n<nav>\r\n    {invoices.map(invoice => (\r\n        <NavLink\r\n            {/*👇*/}\r\n            style={({ isActive }) => { \r\n                return {\r\n                    display: \"block\",\r\n                    margin: \"1rem 0\",\r\n                    color: isActive ? \"red\" : \"\"\r\n                };\r\n            }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n            >\r\n            {invoice.name}\r\n        </NavLink>\r\n    ))}\r\n</nav>\r\n```\r\n```jsx\r\n<NavLink className={({ isActive }) => isActive ? \"red\" : \"blue\"} />\r\n```\r\n\r\n## 8.search params\r\n\r\n用于获取**/shoes?brand=nike&sort=asc&sortby=price**中的值\r\n使用方法：let [searchParams, setSearchParams] = useSearchParams();\r\n		searchParams.get(\'brand\')；\r\n		setSearchParams（{brand}）将会改变 浏览器地址对应brand的值\r\n\r\n```jsx\r\nexport default function Home() {\r\n    let [searchParams, setSearchParams] = useSearchParams();\r\n    return (\r\n        <h1>\r\n            <input\r\n                value={searchParams.get(\"name\") || \"\"}\r\n                onChange={event => {\r\n                    let name = event.target.value;\r\n                    if (name) {\r\n                        setSearchParams({ name });\r\n                    } else {\r\n                        setSearchParams({});\r\n                    }\r\n                }}\r\n            />\r\n            ))}\r\n            Home\r\n        </h1>\r\n    );\r\n}  \r\n```\r\n\r\n## 9.NavLink and useLocation\r\n\r\n组合使用 用来保存跳转过程中url的query保留\r\n```jsx\r\nfunction QueryNavLink({ to, ...props }) {\r\n  let location = useLocation();\r\n  return <NavLink to={to + location.search} {...props} />;\r\n}\r\n```\r\n\r\n## 10. 编程路由跳转\r\n\r\n使用方式：let navigate = useNavigate();\r\n		navigate(\"/invoices\");\r\n\r\n```jsx\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { getInvoice, deleteInvoice } from \"../data\";\r\n\r\nexport default function Invoice() {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <main style={{ padding: \"1rem\" }}>\r\n      <h2>Total Due: {invoice.amount}</h2>\r\n      <p>\r\n        <button\r\n          onClick={() => {\r\n            deleteInvoice(invoice.number);\r\n            navigate(\"/invoices\");\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n```', NULL, 6, 177, 1, '2021-12-16 13:25:37', '2021-12-16 13:25:37', 0);
INSERT INTO `article` VALUES (2, '# React Router 6', 'qi-xiao-gu', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoic', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoices from \"./routes/invoices\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(\r\n  <BrowserRouter>\r\n    <Routes>\r\n      <Route path=\"/\" element={<App />} />\r\n      <Route path=\"invoices\" element={<Invoices />} />\r\n    </Routes>\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper!</h1>\r\n      {/*使用Link 进行路由跳转跳转*/}\r\n      <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Invoices() {\r\n  return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Invoices</h2>\r\n    </main>\r\n  );\r\n}\r\n```\r\n## 2.嵌套路由\r\n<Route>里面有<Route>,嵌套路由的实现做了两件事\r\n\r\n* 将routes嵌套在被嵌套route内\r\n* 渲染一个Outlet\r\n\r\n```jsx\r\nimport { Outlet, Link } from \"react-router-dom\";\r\n// 这里的App是一个Route\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper</h1>\r\n      <nav\r\n        style={{\r\n          borderBottom: \"solid 1px\",\r\n          paddingBottom: \"1rem\"\r\n        }}\r\n      >\r\n        <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n        <Link to=\"/expenses\">Expenses</Link>\r\n      </nav>\r\n      <Outlet /> {/*注意点*/}\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 3.路由传参&路由遍历\r\n\r\n```jsx\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n        {/*注意点见 👇*/}\r\n          <Link\r\n            style={{ display: \"block\", margin: \"1rem 0\" }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </Link>\r\n          {/*注意点见 👆*/}\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 4. 设置No Match 路由\r\n\r\n```jsx\r\n<Routes>\r\n  <Route path=\"/\" element={<App />}>\r\n    <Route path=\"expenses\" element={<Expenses />} />\r\n    <Route path=\"invoices\" element={<Invoices />} />\r\n    <Route\r\n      path=\"*\" {/*👈*/}\r\n      element={\r\n        <main style={{ padding: \"1rem\" }}>\r\n          <p>There\'s nothing here!</p>\r\n        </main>\r\n      }\r\n    />\r\n  </Route>\r\n</Routes>\r\n```\r\n\r\n## 5.读取URL参数\r\n\r\n使用**useParams()**\r\n\r\n```jsx\r\n// 跳转到invoice组件\r\n<Link\r\n    to={`/invoices/2312`}\r\n    key={invoice.number}\r\n    >\r\n    {invoice.name}\r\n</Link>\r\n```\r\n\r\n```jsx\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function Invoice() {\r\n  let params = useParams();  // 这边获取到2312\r\n  return <h2>Invoice: {params.invoiceId}</h2>; \r\n}\r\n```\r\n\r\n## 6. Index路由\r\n\r\n当**子路由**中没有一个能和url匹配时，将会走**index**这个子路由\r\n\r\n```jsx\r\n<Routes>\r\n    <Route path=\"/in\" element={<Home />}>\r\n        <Route\r\n            index {/*👈*/}\r\n            element={\r\n                <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>\r\n            }\r\n            />\r\n        <Route path=\":in\" element={<In />} />\r\n    </Route>\r\n    <Route\r\n        path=\"*\"\r\n        element={<NotFound/>}\r\n        />\r\n</Routes>\r\n```\r\n\r\n```jsx\r\nexport default function Home() {\r\n    return (\r\n        <h1>\r\n            Home\r\n            {/*url为/in时，outlet将渲染 <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>*/}\r\n            {/*url为/in/1234时，outlet将渲染 <In />*/}\r\n            <Outlet/>  {/*👈*/}\r\n        </h1>\r\n    );\r\n}\r\n```\r\n\r\n## 7.active Link\r\n常见的使用场景：导航栏\r\n如何使用：<NavLink>\r\n和<Link>的区别： NavLink可以接受isActive\r\n\r\n```jsx\r\n<nav>\r\n    {invoices.map(invoice => (\r\n        <NavLink\r\n            {/*👇*/}\r\n            style={({ isActive }) => { \r\n                return {\r\n                    display: \"block\",\r\n                    margin: \"1rem 0\",\r\n                    color: isActive ? \"red\" : \"\"\r\n                };\r\n            }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n            >\r\n            {invoice.name}\r\n        </NavLink>\r\n    ))}\r\n</nav>\r\n```\r\n```jsx\r\n<NavLink className={({ isActive }) => isActive ? \"red\" : \"blue\"} />\r\n```\r\n\r\n## 8.search params\r\n\r\n用于获取**/shoes?brand=nike&sort=asc&sortby=price**中的值\r\n使用方法：let [searchParams, setSearchParams] = useSearchParams();\r\n		searchParams.get(\'brand\')；\r\n		setSearchParams（{brand}）将会改变 浏览器地址对应brand的值\r\n\r\n```jsx\r\nexport default function Home() {\r\n    let [searchParams, setSearchParams] = useSearchParams();\r\n    return (\r\n        <h1>\r\n            <input\r\n                value={searchParams.get(\"name\") || \"\"}\r\n                onChange={event => {\r\n                    let name = event.target.value;\r\n                    if (name) {\r\n                        setSearchParams({ name });\r\n                    } else {\r\n                        setSearchParams({});\r\n                    }\r\n                }}\r\n            />\r\n            ))}\r\n            Home\r\n        </h1>\r\n    );\r\n}  \r\n```\r\n\r\n## 9.NavLink and useLocation\r\n\r\n组合使用 用来保存跳转过程中url的query保留\r\n```jsx\r\nfunction QueryNavLink({ to, ...props }) {\r\n  let location = useLocation();\r\n  return <NavLink to={to + location.search} {...props} />;\r\n}\r\n```\r\n\r\n## 10. 编程路由跳转\r\n\r\n使用方式：let navigate = useNavigate();\r\n		navigate(\"/invoices\");\r\n\r\n```jsx\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { getInvoice, deleteInvoice } from \"../data\";\r\n\r\nexport default function Invoice() {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <main style={{ padding: \"1rem\" }}>\r\n      <h2>Total Due: {invoice.amount}</h2>\r\n      <p>\r\n        <button\r\n          onClick={() => {\r\n            deleteInvoice(invoice.number);\r\n            navigate(\"/invoices\");\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n```', NULL, 6, 233, 1, '2021-12-17 14:26:45', '2021-12-16 13:29:52', 0);
INSERT INTO `article` VALUES (3, '# React Router 6', 'qixiaogu', '**BrowserRouter**必须包裹在整个app的最外层', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoices from \"./routes/invoices\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(\r\n  <BrowserRouter>\r\n    <Routes>\r\n      <Route path=\"/\" element={<App />} />\r\n      <Route path=\"invoices\" element={<Invoices />} />\r\n    </Routes>\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper!</h1>\r\n      {/*使用Link 进行路由跳转跳转*/}\r\n      <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Invoices() {\r\n  return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Invoices</h2>\r\n    </main>\r\n  );\r\n}\r\n```\r\n## 2.嵌套路由\r\n<Route>里面有<Route>,嵌套路由的实现做了两件事\r\n\r\n* 将routes嵌套在被嵌套route内\r\n* 渲染一个Outlet\r\n\r\n```jsx\r\nimport { Outlet, Link } from \"react-router-dom\";\r\n// 这里的App是一个Route\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper</h1>\r\n      <nav\r\n        style={{\r\n          borderBottom: \"solid 1px\",\r\n          paddingBottom: \"1rem\"\r\n        }}\r\n      >\r\n        <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n        <Link to=\"/expenses\">Expenses</Link>\r\n      </nav>\r\n      <Outlet /> {/*注意点*/}\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 3.路由传参&路由遍历\r\n\r\n```jsx\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n        {/*注意点见 👇*/}\r\n          <Link\r\n            style={{ display: \"block\", margin: \"1rem 0\" }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </Link>\r\n          {/*注意点见 👆*/}\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 4. 设置No Match 路由\r\n\r\n```jsx\r\n<Routes>\r\n  <Route path=\"/\" element={<App />}>\r\n    <Route path=\"expenses\" element={<Expenses />} />\r\n    <Route path=\"invoices\" element={<Invoices />} />\r\n    <Route\r\n      path=\"*\" {/*👈*/}\r\n      element={\r\n        <main style={{ padding: \"1rem\" }}>\r\n          <p>There\'s nothing here!</p>\r\n        </main>\r\n      }\r\n    />\r\n  </Route>\r\n</Routes>\r\n```\r\n\r\n## 5.读取URL参数\r\n\r\n使用**useParams()**\r\n\r\n```jsx\r\n// 跳转到invoice组件\r\n<Link\r\n    to={`/invoices/2312`}\r\n    key={invoice.number}\r\n    >\r\n    {invoice.name}\r\n</Link>\r\n```\r\n\r\n```jsx\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function Invoice() {\r\n  let params = useParams();  // 这边获取到2312\r\n  return <h2>Invoice: {params.invoiceId}</h2>; \r\n}\r\n```\r\n\r\n## 6. Index路由\r\n\r\n当**子路由**中没有一个能和url匹配时，将会走**index**这个子路由\r\n\r\n```jsx\r\n<Routes>\r\n    <Route path=\"/in\" element={<Home />}>\r\n        <Route\r\n            index {/*👈*/}\r\n            element={\r\n                <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>\r\n            }\r\n            />\r\n        <Route path=\":in\" element={<In />} />\r\n    </Route>\r\n    <Route\r\n        path=\"*\"\r\n        element={<NotFound/>}\r\n        />\r\n</Routes>\r\n```\r\n\r\n```jsx\r\nexport default function Home() {\r\n    return (\r\n        <h1>\r\n            Home\r\n            {/*url为/in时，outlet将渲染 <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>*/}\r\n            {/*url为/in/1234时，outlet将渲染 <In />*/}\r\n            <Outlet/>  {/*👈*/}\r\n        </h1>\r\n    );\r\n}\r\n```\r\n\r\n## 7.active Link\r\n常见的使用场景：导航栏\r\n如何使用：<NavLink>\r\n和<Link>的区别： NavLink可以接受isActive\r\n\r\n```jsx\r\n<nav>\r\n    {invoices.map(invoice => (\r\n        <NavLink\r\n            {/*👇*/}\r\n            style={({ isActive }) => { \r\n                return {\r\n                    display: \"block\",\r\n                    margin: \"1rem 0\",\r\n                    color: isActive ? \"red\" : \"\"\r\n                };\r\n            }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n            >\r\n            {invoice.name}\r\n        </NavLink>\r\n    ))}\r\n</nav>\r\n```\r\n```jsx\r\n<NavLink className={({ isActive }) => isActive ? \"red\" : \"blue\"} />\r\n```\r\n\r\n## 8.search params\r\n\r\n用于获取**/shoes?brand=nike&sort=asc&sortby=price**中的值\r\n使用方法：let [searchParams, setSearchParams] = useSearchParams();\r\n		searchParams.get(\'brand\')；\r\n		setSearchParams（{brand}）将会改变 浏览器地址对应brand的值\r\n\r\n```jsx\r\nexport default function Home() {\r\n    let [searchParams, setSearchParams] = useSearchParams();\r\n    return (\r\n        <h1>\r\n            <input\r\n                value={searchParams.get(\"name\") || \"\"}\r\n                onChange={event => {\r\n                    let name = event.target.value;\r\n                    if (name) {\r\n                        setSearchParams({ name });\r\n                    } else {\r\n                        setSearchParams({});\r\n                    }\r\n                }}\r\n            />\r\n            ))}\r\n            Home\r\n        </h1>\r\n    );\r\n}  \r\n```\r\n\r\n## 9.NavLink and useLocation\r\n\r\n组合使用 用来保存跳转过程中url的query保留\r\n```jsx\r\nfunction QueryNavLink({ to, ...props }) {\r\n  let location = useLocation();\r\n  return <NavLink to={to + location.search} {...props} />;\r\n}\r\n```\r\n\r\n## 10. 编程路由跳转\r\n\r\n使用方式：let navigate = useNavigate();\r\n		navigate(\"/invoices\");\r\n\r\n```jsx\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { getInvoice, deleteInvoice } from \"../data\";\r\n\r\nexport default function Invoice() {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <main style={{ padding: \"1rem\" }}>\r\n      <h2>Total Due: {invoice.amount}</h2>\r\n      <p>\r\n        <button\r\n          onClick={() => {\r\n            deleteInvoice(invoice.number);\r\n            navigate(\"/invoices\");\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n```', NULL, 6, 44, 0, '2021-12-24 16:00:12', '2021-12-16 12:39:15', 0);
INSERT INTO `article` VALUES (4, '# React Router 6', 'qixiaogu', '**BrowserRouter**必须包裹在整个app的最外层', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoices from \"./routes/invoices\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(\r\n  <BrowserRouter>\r\n    <Routes>\r\n      <Route path=\"/\" element={<App />} />\r\n      <Route path=\"invoices\" element={<Invoices />} />\r\n    </Routes>\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper!</h1>\r\n      {/*使用Link 进行路由跳转跳转*/}\r\n      <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Invoices() {\r\n  return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Invoices</h2>\r\n    </main>\r\n  );\r\n}\r\n```\r\n## 2.嵌套路由\r\n<Route>里面有<Route>,嵌套路由的实现做了两件事\r\n\r\n* 将routes嵌套在被嵌套route内\r\n* 渲染一个Outlet\r\n\r\n```jsx\r\nimport { Outlet, Link } from \"react-router-dom\";\r\n// 这里的App是一个Route\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper</h1>\r\n      <nav\r\n        style={{\r\n          borderBottom: \"solid 1px\",\r\n          paddingBottom: \"1rem\"\r\n        }}\r\n      >\r\n        <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n        <Link to=\"/expenses\">Expenses</Link>\r\n      </nav>\r\n      <Outlet /> {/*注意点*/}\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 3.路由传参&路由遍历\r\n\r\n```jsx\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n        {/*注意点见 👇*/}\r\n          <Link\r\n            style={{ display: \"block\", margin: \"1rem 0\" }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </Link>\r\n          {/*注意点见 👆*/}\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 4. 设置No Match 路由\r\n\r\n```jsx\r\n<Routes>\r\n  <Route path=\"/\" element={<App />}>\r\n    <Route path=\"expenses\" element={<Expenses />} />\r\n    <Route path=\"invoices\" element={<Invoices />} />\r\n    <Route\r\n      path=\"*\" {/*👈*/}\r\n      element={\r\n        <main style={{ padding: \"1rem\" }}>\r\n          <p>There\'s nothing here!</p>\r\n        </main>\r\n      }\r\n    />\r\n  </Route>\r\n</Routes>\r\n```\r\n\r\n## 5.读取URL参数\r\n\r\n使用**useParams()**\r\n\r\n```jsx\r\n// 跳转到invoice组件\r\n<Link\r\n    to={`/invoices/2312`}\r\n    key={invoice.number}\r\n    >\r\n    {invoice.name}\r\n</Link>\r\n```\r\n\r\n```jsx\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function Invoice() {\r\n  let params = useParams();  // 这边获取到2312\r\n  return <h2>Invoice: {params.invoiceId}</h2>; \r\n}\r\n```\r\n\r\n## 6. Index路由\r\n\r\n当**子路由**中没有一个能和url匹配时，将会走**index**这个子路由\r\n\r\n```jsx\r\n<Routes>\r\n    <Route path=\"/in\" element={<Home />}>\r\n        <Route\r\n            index {/*👈*/}\r\n            element={\r\n                <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>\r\n            }\r\n            />\r\n        <Route path=\":in\" element={<In />} />\r\n    </Route>\r\n    <Route\r\n        path=\"*\"\r\n        element={<NotFound/>}\r\n        />\r\n</Routes>\r\n```\r\n\r\n```jsx\r\nexport default function Home() {\r\n    return (\r\n        <h1>\r\n            Home\r\n            {/*url为/in时，outlet将渲染 <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>*/}\r\n            {/*url为/in/1234时，outlet将渲染 <In />*/}\r\n            <Outlet/>  {/*👈*/}\r\n        </h1>\r\n    );\r\n}\r\n```\r\n\r\n## 7.active Link\r\n常见的使用场景：导航栏\r\n如何使用：<NavLink>\r\n和<Link>的区别： NavLink可以接受isActive\r\n\r\n```jsx\r\n<nav>\r\n    {invoices.map(invoice => (\r\n        <NavLink\r\n            {/*👇*/}\r\n            style={({ isActive }) => { \r\n                return {\r\n                    display: \"block\",\r\n                    margin: \"1rem 0\",\r\n                    color: isActive ? \"red\" : \"\"\r\n                };\r\n            }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n            >\r\n            {invoice.name}\r\n        </NavLink>\r\n    ))}\r\n</nav>\r\n```\r\n```jsx\r\n<NavLink className={({ isActive }) => isActive ? \"red\" : \"blue\"} />\r\n```\r\n\r\n## 8.search params\r\n\r\n用于获取**/shoes?brand=nike&sort=asc&sortby=price**中的值\r\n使用方法：let [searchParams, setSearchParams] = useSearchParams();\r\n		searchParams.get(\'brand\')；\r\n		setSearchParams（{brand}）将会改变 浏览器地址对应brand的值\r\n\r\n```jsx\r\nexport default function Home() {\r\n    let [searchParams, setSearchParams] = useSearchParams();\r\n    return (\r\n        <h1>\r\n            <input\r\n                value={searchParams.get(\"name\") || \"\"}\r\n                onChange={event => {\r\n                    let name = event.target.value;\r\n                    if (name) {\r\n                        setSearchParams({ name });\r\n                    } else {\r\n                        setSearchParams({});\r\n                    }\r\n                }}\r\n            />\r\n            ))}\r\n            Home\r\n        </h1>\r\n    );\r\n}  \r\n```\r\n\r\n## 9.NavLink and useLocation\r\n\r\n组合使用 用来保存跳转过程中url的query保留\r\n```jsx\r\nfunction QueryNavLink({ to, ...props }) {\r\n  let location = useLocation();\r\n  return <NavLink to={to + location.search} {...props} />;\r\n}\r\n```\r\n\r\n## 10. 编程路由跳转\r\n\r\n使用方式：let navigate = useNavigate();\r\n		navigate(\"/invoices\");\r\n\r\n```jsx\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { getInvoice, deleteInvoice } from \"../data\";\r\n\r\nexport default function Invoice() {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <main style={{ padding: \"1rem\" }}>\r\n      <h2>Total Due: {invoice.amount}</h2>\r\n      <p>\r\n        <button\r\n          onClick={() => {\r\n            deleteInvoice(invoice.number);\r\n            navigate(\"/invoices\");\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n```', NULL, 6, 50, 0, '2021-12-18 11:08:16', '2021-12-16 13:17:28', 1);
INSERT INTO `article` VALUES (5, '# React Router 6', 'qixiaogu', '**BrowserRouter**必须包裹在整个app的最外层', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoices from \"./routes/invoices\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(\r\n  <BrowserRouter>\r\n    <Routes>\r\n      <Route path=\"/\" element={<App />} />\r\n      <Route path=\"invoices\" element={<Invoices />} />\r\n    </Routes>\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper!</h1>\r\n      {/*使用Link 进行路由跳转跳转*/}\r\n      <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Invoices() {\r\n  return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Invoices</h2>\r\n    </main>\r\n  );\r\n}\r\n```\r\n## 2.嵌套路由\r\n<Route>里面有<Route>,嵌套路由的实现做了两件事\r\n\r\n* 将routes嵌套在被嵌套route内\r\n* 渲染一个Outlet\r\n\r\n```jsx\r\nimport { Outlet, Link } from \"react-router-dom\";\r\n// 这里的App是一个Route\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper</h1>\r\n      <nav\r\n        style={{\r\n          borderBottom: \"solid 1px\",\r\n          paddingBottom: \"1rem\"\r\n        }}\r\n      >\r\n        <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n        <Link to=\"/expenses\">Expenses</Link>\r\n      </nav>\r\n      <Outlet /> {/*注意点*/}\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 3.路由传参&路由遍历\r\n\r\n```jsx\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n        {/*注意点见 👇*/}\r\n          <Link\r\n            style={{ display: \"block\", margin: \"1rem 0\" }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </Link>\r\n          {/*注意点见 👆*/}\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 4. 设置No Match 路由\r\n\r\n```jsx\r\n<Routes>\r\n  <Route path=\"/\" element={<App />}>\r\n    <Route path=\"expenses\" element={<Expenses />} />\r\n    <Route path=\"invoices\" element={<Invoices />} />\r\n    <Route\r\n      path=\"*\" {/*👈*/}\r\n      element={\r\n        <main style={{ padding: \"1rem\" }}>\r\n          <p>There\'s nothing here!</p>\r\n        </main>\r\n      }\r\n    />\r\n  </Route>\r\n</Routes>\r\n```\r\n\r\n## 5.读取URL参数\r\n\r\n使用**useParams()**\r\n\r\n```jsx\r\n// 跳转到invoice组件\r\n<Link\r\n    to={`/invoices/2312`}\r\n    key={invoice.number}\r\n    >\r\n    {invoice.name}\r\n</Link>\r\n```\r\n\r\n```jsx\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function Invoice() {\r\n  let params = useParams();  // 这边获取到2312\r\n  return <h2>Invoice: {params.invoiceId}</h2>; \r\n}\r\n```\r\n\r\n## 6. Index路由\r\n\r\n当**子路由**中没有一个能和url匹配时，将会走**index**这个子路由\r\n\r\n```jsx\r\n<Routes>\r\n    <Route path=\"/in\" element={<Home />}>\r\n        <Route\r\n            index {/*👈*/}\r\n            element={\r\n                <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>\r\n            }\r\n            />\r\n        <Route path=\":in\" element={<In />} />\r\n    </Route>\r\n    <Route\r\n        path=\"*\"\r\n        element={<NotFound/>}\r\n        />\r\n</Routes>\r\n```\r\n\r\n```jsx\r\nexport default function Home() {\r\n    return (\r\n        <h1>\r\n            Home\r\n            {/*url为/in时，outlet将渲染 <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>*/}\r\n            {/*url为/in/1234时，outlet将渲染 <In />*/}\r\n            <Outlet/>  {/*👈*/}\r\n        </h1>\r\n    );\r\n}\r\n```\r\n\r\n## 7.active Link\r\n常见的使用场景：导航栏\r\n如何使用：<NavLink>\r\n和<Link>的区别： NavLink可以接受isActive\r\n\r\n```jsx\r\n<nav>\r\n    {invoices.map(invoice => (\r\n        <NavLink\r\n            {/*👇*/}\r\n            style={({ isActive }) => { \r\n                return {\r\n                    display: \"block\",\r\n                    margin: \"1rem 0\",\r\n                    color: isActive ? \"red\" : \"\"\r\n                };\r\n            }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n            >\r\n            {invoice.name}\r\n        </NavLink>\r\n    ))}\r\n</nav>\r\n```\r\n```jsx\r\n<NavLink className={({ isActive }) => isActive ? \"red\" : \"blue\"} />\r\n```\r\n\r\n## 8.search params\r\n\r\n用于获取**/shoes?brand=nike&sort=asc&sortby=price**中的值\r\n使用方法：let [searchParams, setSearchParams] = useSearchParams();\r\n		searchParams.get(\'brand\')；\r\n		setSearchParams（{brand}）将会改变 浏览器地址对应brand的值\r\n\r\n```jsx\r\nexport default function Home() {\r\n    let [searchParams, setSearchParams] = useSearchParams();\r\n    return (\r\n        <h1>\r\n            <input\r\n                value={searchParams.get(\"name\") || \"\"}\r\n                onChange={event => {\r\n                    let name = event.target.value;\r\n                    if (name) {\r\n                        setSearchParams({ name });\r\n                    } else {\r\n                        setSearchParams({});\r\n                    }\r\n                }}\r\n            />\r\n            ))}\r\n            Home\r\n        </h1>\r\n    );\r\n}  \r\n```\r\n\r\n## 9.NavLink and useLocation\r\n\r\n组合使用 用来保存跳转过程中url的query保留\r\n```jsx\r\nfunction QueryNavLink({ to, ...props }) {\r\n  let location = useLocation();\r\n  return <NavLink to={to + location.search} {...props} />;\r\n}\r\n```\r\n\r\n## 10. 编程路由跳转\r\n\r\n使用方式：let navigate = useNavigate();\r\n		navigate(\"/invoices\");\r\n\r\n```jsx\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { getInvoice, deleteInvoice } from \"../data\";\r\n\r\nexport default function Invoice() {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <main style={{ padding: \"1rem\" }}>\r\n      <h2>Total Due: {invoice.amount}</h2>\r\n      <p>\r\n        <button\r\n          onClick={() => {\r\n            deleteInvoice(invoice.number);\r\n            navigate(\"/invoices\");\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n```', NULL, 6, 17, 0, '2021-12-24 16:00:24', '2021-12-15 16:11:53', 0);
INSERT INTO `article` VALUES (6, 'React Router 6', 'qi-xiao-gu', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoic', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoices from \"./routes/invoices\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(\r\n  <BrowserRouter>\r\n    <Routes>\r\n      <Route path=\"/\" element={<App />} />\r\n      <Route path=\"invoices\" element={<Invoices />} />\r\n    </Routes>\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper!</h1>\r\n      {/*使用Link 进行路由跳转跳转*/}\r\n      <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Invoices() {\r\n  return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Invoices</h2>\r\n    </main>\r\n  );\r\n}\r\n```\r\n## 2.嵌套路由\r\n<Route>里面有<Route>,嵌套路由的实现做了两件事\r\n\r\n* 将routes嵌套在被嵌套route内\r\n* 渲染一个Outlet\r\n\r\n```jsx\r\nimport { Outlet, Link } from \"react-router-dom\";\r\n// 这里的App是一个Route\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper</h1>\r\n      <nav\r\n        style={{\r\n          borderBottom: \"solid 1px\",\r\n          paddingBottom: \"1rem\"\r\n        }}\r\n      >\r\n        <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n        <Link to=\"/expenses\">Expenses</Link>\r\n      </nav>\r\n      <Outlet /> {/*注意点*/}\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 3.路由传参&路由遍历\r\n\r\n```jsx\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n        {/*注意点见 👇*/}\r\n          <Link\r\n            style={{ display: \"block\", margin: \"1rem 0\" }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </Link>\r\n          {/*注意点见 👆*/}\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 4. 设置No Match 路由\r\n\r\n```jsx\r\n<Routes>\r\n  <Route path=\"/\" element={<App />}>\r\n    <Route path=\"expenses\" element={<Expenses />} />\r\n    <Route path=\"invoices\" element={<Invoices />} />\r\n    <Route\r\n      path=\"*\" {/*👈*/}\r\n      element={\r\n        <main style={{ padding: \"1rem\" }}>\r\n          <p>There\'s nothing here!</p>\r\n        </main>\r\n      }\r\n    />\r\n  </Route>\r\n</Routes>\r\n```\r\n\r\n## 5.读取URL参数\r\n\r\n使用**useParams()**\r\n\r\n```jsx\r\n// 跳转到invoice组件\r\n<Link\r\n    to={`/invoices/2312`}\r\n    key={invoice.number}\r\n    >\r\n    {invoice.name}\r\n</Link>\r\n```\r\n\r\n```jsx\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function Invoice() {\r\n  let params = useParams();  // 这边获取到2312\r\n  return <h2>Invoice: {params.invoiceId}</h2>; \r\n}\r\n```\r\n\r\n## 6. Index路由\r\n\r\n当**子路由**中没有一个能和url匹配时，将会走**index**这个子路由\r\n\r\n```jsx\r\n<Routes>\r\n    <Route path=\"/in\" element={<Home />}>\r\n        <Route\r\n            index {/*👈*/}\r\n            element={\r\n                <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>\r\n            }\r\n            />\r\n        <Route path=\":in\" element={<In />} />\r\n    </Route>\r\n    <Route\r\n        path=\"*\"\r\n        element={<NotFound/>}\r\n        />\r\n</Routes>\r\n```\r\n\r\n```jsx\r\nexport default function Home() {\r\n    return (\r\n        <h1>\r\n            Home\r\n            {/*url为/in时，outlet将渲染 <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>*/}\r\n            {/*url为/in/1234时，outlet将渲染 <In />*/}\r\n            <Outlet/>  {/*👈*/}\r\n        </h1>\r\n    );\r\n}\r\n```\r\n\r\n## 7.active Link\r\n常见的使用场景：导航栏\r\n如何使用：<NavLink>\r\n和<Link>的区别： NavLink可以接受isActive\r\n\r\n```jsx\r\n<nav>\r\n    {invoices.map(invoice => (\r\n        <NavLink\r\n            {/*👇*/}\r\n            style={({ isActive }) => { \r\n                return {\r\n                    display: \"block\",\r\n                    margin: \"1rem 0\",\r\n                    color: isActive ? \"red\" : \"\"\r\n                };\r\n            }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n            >\r\n            {invoice.name}\r\n        </NavLink>\r\n    ))}\r\n</nav>\r\n```\r\n```jsx\r\n<NavLink className={({ isActive }) => isActive ? \"red\" : \"blue\"} />\r\n```\r\n\r\n## 8.search params\r\n\r\n用于获取**/shoes?brand=nike&sort=asc&sortby=price**中的值\r\n使用方法：let [searchParams, setSearchParams] = useSearchParams();\r\n		searchParams.get(\'brand\')；\r\n		setSearchParams（{brand}）将会改变 浏览器地址对应brand的值\r\n\r\n```jsx\r\nexport default function Home() {\r\n    let [searchParams, setSearchParams] = useSearchParams();\r\n    return (\r\n        <h1>\r\n            <input\r\n                value={searchParams.get(\"name\") || \"\"}\r\n                onChange={event => {\r\n                    let name = event.target.value;\r\n                    if (name) {\r\n                        setSearchParams({ name });\r\n                    } else {\r\n                        setSearchParams({});\r\n                    }\r\n                }}\r\n            />\r\n            ))}\r\n            Home\r\n        </h1>\r\n    );\r\n}  \r\n```\r\n\r\n## 9.NavLink and useLocation\r\n\r\n组合使用 用来保存跳转过程中url的query保留\r\n```jsx\r\nfunction QueryNavLink({ to, ...props }) {\r\n  let location = useLocation();\r\n  return <NavLink to={to + location.search} {...props} />;\r\n}\r\n```\r\n\r\n## 10. 编程路由跳转\r\n\r\n使用方式：let navigate = useNavigate();\r\n		navigate(\"/invoices\");\r\n\r\n```jsx\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { getInvoice, deleteInvoice } from \"../data\";\r\n\r\nexport default function Invoice() {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <main style={{ padding: \"1rem\" }}>\r\n      <h2>Total Due: {invoice.amount}</h2>\r\n      <p>\r\n        <button\r\n          onClick={() => {\r\n            deleteInvoice(invoice.number);\r\n            navigate(\"/invoices\");\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n```', NULL, 6, 61, 0, '2021-12-19 10:35:30', '2021-12-15 16:15:03', 0);
INSERT INTO `article` VALUES (7, '# React Router 6', 'qixiaogu', '**BrowserRouter**必须包裹在整个app的最外层', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoices from \"./routes/invoices\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(\r\n  <BrowserRouter>\r\n    <Routes>\r\n      <Route path=\"/\" element={<App />} />\r\n      <Route path=\"invoices\" element={<Invoices />} />\r\n    </Routes>\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper!</h1>\r\n      {/*使用Link 进行路由跳转跳转*/}\r\n      <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Invoices() {\r\n  return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Invoices</h2>\r\n    </main>\r\n  );\r\n}\r\n```\r\n## 2.嵌套路由\r\n<Route>里面有<Route>,嵌套路由的实现做了两件事\r\n\r\n* 将routes嵌套在被嵌套route内\r\n* 渲染一个Outlet\r\n\r\n```jsx\r\nimport { Outlet, Link } from \"react-router-dom\";\r\n// 这里的App是一个Route\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper</h1>\r\n      <nav\r\n        style={{\r\n          borderBottom: \"solid 1px\",\r\n          paddingBottom: \"1rem\"\r\n        }}\r\n      >\r\n        <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n        <Link to=\"/expenses\">Expenses</Link>\r\n      </nav>\r\n      <Outlet /> {/*注意点*/}\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 3.路由传参&路由遍历\r\n\r\n```jsx\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n        {/*注意点见 👇*/}\r\n          <Link\r\n            style={{ display: \"block\", margin: \"1rem 0\" }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </Link>\r\n          {/*注意点见 👆*/}\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 4. 设置No Match 路由\r\n\r\n```jsx\r\n<Routes>\r\n  <Route path=\"/\" element={<App />}>\r\n    <Route path=\"expenses\" element={<Expenses />} />\r\n    <Route path=\"invoices\" element={<Invoices />} />\r\n    <Route\r\n      path=\"*\" {/*👈*/}\r\n      element={\r\n        <main style={{ padding: \"1rem\" }}>\r\n          <p>There\'s nothing here!</p>\r\n        </main>\r\n      }\r\n    />\r\n  </Route>\r\n</Routes>\r\n```\r\n\r\n## 5.读取URL参数\r\n\r\n使用**useParams()**\r\n\r\n```jsx\r\n// 跳转到invoice组件\r\n<Link\r\n    to={`/invoices/2312`}\r\n    key={invoice.number}\r\n    >\r\n    {invoice.name}\r\n</Link>\r\n```\r\n\r\n```jsx\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function Invoice() {\r\n  let params = useParams();  // 这边获取到2312\r\n  return <h2>Invoice: {params.invoiceId}</h2>; \r\n}\r\n```\r\n\r\n## 6. Index路由\r\n\r\n当**子路由**中没有一个能和url匹配时，将会走**index**这个子路由\r\n\r\n```jsx\r\n<Routes>\r\n    <Route path=\"/in\" element={<Home />}>\r\n        <Route\r\n            index {/*👈*/}\r\n            element={\r\n                <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>\r\n            }\r\n            />\r\n        <Route path=\":in\" element={<In />} />\r\n    </Route>\r\n    <Route\r\n        path=\"*\"\r\n        element={<NotFound/>}\r\n        />\r\n</Routes>\r\n```\r\n\r\n```jsx\r\nexport default function Home() {\r\n    return (\r\n        <h1>\r\n            Home\r\n            {/*url为/in时，outlet将渲染 <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>*/}\r\n            {/*url为/in/1234时，outlet将渲染 <In />*/}\r\n            <Outlet/>  {/*👈*/}\r\n        </h1>\r\n    );\r\n}\r\n```\r\n\r\n## 7.active Link\r\n常见的使用场景：导航栏\r\n如何使用：<NavLink>\r\n和<Link>的区别： NavLink可以接受isActive\r\n\r\n```jsx\r\n<nav>\r\n    {invoices.map(invoice => (\r\n        <NavLink\r\n            {/*👇*/}\r\n            style={({ isActive }) => { \r\n                return {\r\n                    display: \"block\",\r\n                    margin: \"1rem 0\",\r\n                    color: isActive ? \"red\" : \"\"\r\n                };\r\n            }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n            >\r\n            {invoice.name}\r\n        </NavLink>\r\n    ))}\r\n</nav>\r\n```\r\n```jsx\r\n<NavLink className={({ isActive }) => isActive ? \"red\" : \"blue\"} />\r\n```\r\n\r\n## 8.search params\r\n\r\n用于获取**/shoes?brand=nike&sort=asc&sortby=price**中的值\r\n使用方法：let [searchParams, setSearchParams] = useSearchParams();\r\n		searchParams.get(\'brand\')；\r\n		setSearchParams（{brand}）将会改变 浏览器地址对应brand的值\r\n\r\n```jsx\r\nexport default function Home() {\r\n    let [searchParams, setSearchParams] = useSearchParams();\r\n    return (\r\n        <h1>\r\n            <input\r\n                value={searchParams.get(\"name\") || \"\"}\r\n                onChange={event => {\r\n                    let name = event.target.value;\r\n                    if (name) {\r\n                        setSearchParams({ name });\r\n                    } else {\r\n                        setSearchParams({});\r\n                    }\r\n                }}\r\n            />\r\n            ))}\r\n            Home\r\n        </h1>\r\n    );\r\n}  \r\n```\r\n\r\n## 9.NavLink and useLocation\r\n\r\n组合使用 用来保存跳转过程中url的query保留\r\n```jsx\r\nfunction QueryNavLink({ to, ...props }) {\r\n  let location = useLocation();\r\n  return <NavLink to={to + location.search} {...props} />;\r\n}\r\n```\r\n\r\n## 10. 编程路由跳转\r\n\r\n使用方式：let navigate = useNavigate();\r\n		navigate(\"/invoices\");\r\n\r\n```jsx\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { getInvoice, deleteInvoice } from \"../data\";\r\n\r\nexport default function Invoice() {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <main style={{ padding: \"1rem\" }}>\r\n      <h2>Total Due: {invoice.amount}</h2>\r\n      <p>\r\n        <button\r\n          onClick={() => {\r\n            deleteInvoice(invoice.number);\r\n            navigate(\"/invoices\");\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n```', NULL, 6, 16, 0, '2021-12-24 16:01:23', '2021-12-15 14:42:54', 0);
INSERT INTO `article` VALUES (8, '# React Router 6', 'qixiaogu', '**BrowserRouter**必须包裹在整个app的最外层', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoices from \"./routes/invoices\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(\r\n  <BrowserRouter>\r\n    <Routes>\r\n      <Route path=\"/\" element={<App />} />\r\n      <Route path=\"invoices\" element={<Invoices />} />\r\n    </Routes>\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper!</h1>\r\n      {/*使用Link 进行路由跳转跳转*/}\r\n      <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Invoices() {\r\n  return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Invoices</h2>\r\n    </main>\r\n  );\r\n}\r\n```\r\n## 2.嵌套路由\r\n<Route>里面有<Route>,嵌套路由的实现做了两件事\r\n\r\n* 将routes嵌套在被嵌套route内\r\n* 渲染一个Outlet\r\n\r\n```jsx\r\nimport { Outlet, Link } from \"react-router-dom\";\r\n// 这里的App是一个Route\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper</h1>\r\n      <nav\r\n        style={{\r\n          borderBottom: \"solid 1px\",\r\n          paddingBottom: \"1rem\"\r\n        }}\r\n      >\r\n        <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n        <Link to=\"/expenses\">Expenses</Link>\r\n      </nav>\r\n      <Outlet /> {/*注意点*/}\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 3.路由传参&路由遍历\r\n\r\n```jsx\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n        {/*注意点见 👇*/}\r\n          <Link\r\n            style={{ display: \"block\", margin: \"1rem 0\" }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </Link>\r\n          {/*注意点见 👆*/}\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 4. 设置No Match 路由\r\n\r\n```jsx\r\n<Routes>\r\n  <Route path=\"/\" element={<App />}>\r\n    <Route path=\"expenses\" element={<Expenses />} />\r\n    <Route path=\"invoices\" element={<Invoices />} />\r\n    <Route\r\n      path=\"*\" {/*👈*/}\r\n      element={\r\n        <main style={{ padding: \"1rem\" }}>\r\n          <p>There\'s nothing here!</p>\r\n        </main>\r\n      }\r\n    />\r\n  </Route>\r\n</Routes>\r\n```\r\n\r\n## 5.读取URL参数\r\n\r\n使用**useParams()**\r\n\r\n```jsx\r\n// 跳转到invoice组件\r\n<Link\r\n    to={`/invoices/2312`}\r\n    key={invoice.number}\r\n    >\r\n    {invoice.name}\r\n</Link>\r\n```\r\n\r\n```jsx\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function Invoice() {\r\n  let params = useParams();  // 这边获取到2312\r\n  return <h2>Invoice: {params.invoiceId}</h2>; \r\n}\r\n```\r\n\r\n## 6. Index路由\r\n\r\n当**子路由**中没有一个能和url匹配时，将会走**index**这个子路由\r\n\r\n```jsx\r\n<Routes>\r\n    <Route path=\"/in\" element={<Home />}>\r\n        <Route\r\n            index {/*👈*/}\r\n            element={\r\n                <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>\r\n            }\r\n            />\r\n        <Route path=\":in\" element={<In />} />\r\n    </Route>\r\n    <Route\r\n        path=\"*\"\r\n        element={<NotFound/>}\r\n        />\r\n</Routes>\r\n```\r\n\r\n```jsx\r\nexport default function Home() {\r\n    return (\r\n        <h1>\r\n            Home\r\n            {/*url为/in时，outlet将渲染 <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>*/}\r\n            {/*url为/in/1234时，outlet将渲染 <In />*/}\r\n            <Outlet/>  {/*👈*/}\r\n        </h1>\r\n    );\r\n}\r\n```\r\n\r\n## 7.active Link\r\n常见的使用场景：导航栏\r\n如何使用：<NavLink>\r\n和<Link>的区别： NavLink可以接受isActive\r\n\r\n```jsx\r\n<nav>\r\n    {invoices.map(invoice => (\r\n        <NavLink\r\n            {/*👇*/}\r\n            style={({ isActive }) => { \r\n                return {\r\n                    display: \"block\",\r\n                    margin: \"1rem 0\",\r\n                    color: isActive ? \"red\" : \"\"\r\n                };\r\n            }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n            >\r\n            {invoice.name}\r\n        </NavLink>\r\n    ))}\r\n</nav>\r\n```\r\n```jsx\r\n<NavLink className={({ isActive }) => isActive ? \"red\" : \"blue\"} />\r\n```\r\n\r\n## 8.search params\r\n\r\n用于获取**/shoes?brand=nike&sort=asc&sortby=price**中的值\r\n使用方法：let [searchParams, setSearchParams] = useSearchParams();\r\n		searchParams.get(\'brand\')；\r\n		setSearchParams（{brand}）将会改变 浏览器地址对应brand的值\r\n\r\n```jsx\r\nexport default function Home() {\r\n    let [searchParams, setSearchParams] = useSearchParams();\r\n    return (\r\n        <h1>\r\n            <input\r\n                value={searchParams.get(\"name\") || \"\"}\r\n                onChange={event => {\r\n                    let name = event.target.value;\r\n                    if (name) {\r\n                        setSearchParams({ name });\r\n                    } else {\r\n                        setSearchParams({});\r\n                    }\r\n                }}\r\n            />\r\n            ))}\r\n            Home\r\n        </h1>\r\n    );\r\n}  \r\n```\r\n\r\n## 9.NavLink and useLocation\r\n\r\n组合使用 用来保存跳转过程中url的query保留\r\n```jsx\r\nfunction QueryNavLink({ to, ...props }) {\r\n  let location = useLocation();\r\n  return <NavLink to={to + location.search} {...props} />;\r\n}\r\n```\r\n\r\n## 10. 编程路由跳转\r\n\r\n使用方式：let navigate = useNavigate();\r\n		navigate(\"/invoices\");\r\n\r\n```jsx\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { getInvoice, deleteInvoice } from \"../data\";\r\n\r\nexport default function Invoice() {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <main style={{ padding: \"1rem\" }}>\r\n      <h2>Total Due: {invoice.amount}</h2>\r\n      <p>\r\n        <button\r\n          onClick={() => {\r\n            deleteInvoice(invoice.number);\r\n            navigate(\"/invoices\");\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n```', NULL, 6, 23, 0, '2021-12-18 09:52:31', '2021-12-15 16:14:25', 0);
INSERT INTO `article` VALUES (9, '# React Router 6', 'qixiaogu', '**BrowserRouter**必须包裹在整个app的最外层', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoices from \"./routes/invoices\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(\r\n  <BrowserRouter>\r\n    <Routes>\r\n      <Route path=\"/\" element={<App />} />\r\n      <Route path=\"invoices\" element={<Invoices />} />\r\n    </Routes>\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper!</h1>\r\n      {/*使用Link 进行路由跳转跳转*/}\r\n      <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Invoices() {\r\n  return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Invoices</h2>\r\n    </main>\r\n  );\r\n}\r\n```\r\n## 2.嵌套路由\r\n<Route>里面有<Route>,嵌套路由的实现做了两件事\r\n\r\n* 将routes嵌套在被嵌套route内\r\n* 渲染一个Outlet\r\n\r\n```jsx\r\nimport { Outlet, Link } from \"react-router-dom\";\r\n// 这里的App是一个Route\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper</h1>\r\n      <nav\r\n        style={{\r\n          borderBottom: \"solid 1px\",\r\n          paddingBottom: \"1rem\"\r\n        }}\r\n      >\r\n        <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n        <Link to=\"/expenses\">Expenses</Link>\r\n      </nav>\r\n      <Outlet /> {/*注意点*/}\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 3.路由传参&路由遍历\r\n\r\n```jsx\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n        {/*注意点见 👇*/}\r\n          <Link\r\n            style={{ display: \"block\", margin: \"1rem 0\" }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </Link>\r\n          {/*注意点见 👆*/}\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 4. 设置No Match 路由\r\n\r\n```jsx\r\n<Routes>\r\n  <Route path=\"/\" element={<App />}>\r\n    <Route path=\"expenses\" element={<Expenses />} />\r\n    <Route path=\"invoices\" element={<Invoices />} />\r\n    <Route\r\n      path=\"*\" {/*👈*/}\r\n      element={\r\n        <main style={{ padding: \"1rem\" }}>\r\n          <p>There\'s nothing here!</p>\r\n        </main>\r\n      }\r\n    />\r\n  </Route>\r\n</Routes>\r\n```\r\n\r\n## 5.读取URL参数\r\n\r\n使用**useParams()**\r\n\r\n```jsx\r\n// 跳转到invoice组件\r\n<Link\r\n    to={`/invoices/2312`}\r\n    key={invoice.number}\r\n    >\r\n    {invoice.name}\r\n</Link>\r\n```\r\n\r\n```jsx\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function Invoice() {\r\n  let params = useParams();  // 这边获取到2312\r\n  return <h2>Invoice: {params.invoiceId}</h2>; \r\n}\r\n```\r\n\r\n## 6. Index路由\r\n\r\n当**子路由**中没有一个能和url匹配时，将会走**index**这个子路由\r\n\r\n```jsx\r\n<Routes>\r\n    <Route path=\"/in\" element={<Home />}>\r\n        <Route\r\n            index {/*👈*/}\r\n            element={\r\n                <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>\r\n            }\r\n            />\r\n        <Route path=\":in\" element={<In />} />\r\n    </Route>\r\n    <Route\r\n        path=\"*\"\r\n        element={<NotFound/>}\r\n        />\r\n</Routes>\r\n```\r\n\r\n```jsx\r\nexport default function Home() {\r\n    return (\r\n        <h1>\r\n            Home\r\n            {/*url为/in时，outlet将渲染 <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>*/}\r\n            {/*url为/in/1234时，outlet将渲染 <In />*/}\r\n            <Outlet/>  {/*👈*/}\r\n        </h1>\r\n    );\r\n}\r\n```\r\n\r\n## 7.active Link\r\n常见的使用场景：导航栏\r\n如何使用：<NavLink>\r\n和<Link>的区别： NavLink可以接受isActive\r\n\r\n```jsx\r\n<nav>\r\n    {invoices.map(invoice => (\r\n        <NavLink\r\n            {/*👇*/}\r\n            style={({ isActive }) => { \r\n                return {\r\n                    display: \"block\",\r\n                    margin: \"1rem 0\",\r\n                    color: isActive ? \"red\" : \"\"\r\n                };\r\n            }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n            >\r\n            {invoice.name}\r\n        </NavLink>\r\n    ))}\r\n</nav>\r\n```\r\n```jsx\r\n<NavLink className={({ isActive }) => isActive ? \"red\" : \"blue\"} />\r\n```\r\n\r\n## 8.search params\r\n\r\n用于获取**/shoes?brand=nike&sort=asc&sortby=price**中的值\r\n使用方法：let [searchParams, setSearchParams] = useSearchParams();\r\n		searchParams.get(\'brand\')；\r\n		setSearchParams（{brand}）将会改变 浏览器地址对应brand的值\r\n\r\n```jsx\r\nexport default function Home() {\r\n    let [searchParams, setSearchParams] = useSearchParams();\r\n    return (\r\n        <h1>\r\n            <input\r\n                value={searchParams.get(\"name\") || \"\"}\r\n                onChange={event => {\r\n                    let name = event.target.value;\r\n                    if (name) {\r\n                        setSearchParams({ name });\r\n                    } else {\r\n                        setSearchParams({});\r\n                    }\r\n                }}\r\n            />\r\n            ))}\r\n            Home\r\n        </h1>\r\n    );\r\n}  \r\n```\r\n\r\n## 9.NavLink and useLocation\r\n\r\n组合使用 用来保存跳转过程中url的query保留\r\n```jsx\r\nfunction QueryNavLink({ to, ...props }) {\r\n  let location = useLocation();\r\n  return <NavLink to={to + location.search} {...props} />;\r\n}\r\n```\r\n\r\n## 10. 编程路由跳转\r\n\r\n使用方式：let navigate = useNavigate();\r\n		navigate(\"/invoices\");\r\n\r\n```jsx\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { getInvoice, deleteInvoice } from \"../data\";\r\n\r\nexport default function Invoice() {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <main style={{ padding: \"1rem\" }}>\r\n      <h2>Total Due: {invoice.amount}</h2>\r\n      <p>\r\n        <button\r\n          onClick={() => {\r\n            deleteInvoice(invoice.number);\r\n            navigate(\"/invoices\");\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n```', NULL, 6, 24, 0, '2021-12-18 12:02:29', '2021-12-16 12:50:51', 1);
INSERT INTO `article` VALUES (10, '# React Router 6', 'qixiaogu', '**BrowserRouter**必须包裹在整个app的最外层', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoices from \"./routes/invoices\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(\r\n  <BrowserRouter>\r\n    <Routes>\r\n      <Route path=\"/\" element={<App />} />\r\n      <Route path=\"invoices\" element={<Invoices />} />\r\n    </Routes>\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper!</h1>\r\n      {/*使用Link 进行路由跳转跳转*/}\r\n      <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Invoices() {\r\n  return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Invoices</h2>\r\n    </main>\r\n  );\r\n}\r\n```\r\n## 2.嵌套路由\r\n<Route>里面有<Route>,嵌套路由的实现做了两件事\r\n\r\n* 将routes嵌套在被嵌套route内\r\n* 渲染一个Outlet\r\n\r\n```jsx\r\nimport { Outlet, Link } from \"react-router-dom\";\r\n// 这里的App是一个Route\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper</h1>\r\n      <nav\r\n        style={{\r\n          borderBottom: \"solid 1px\",\r\n          paddingBottom: \"1rem\"\r\n        }}\r\n      >\r\n        <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n        <Link to=\"/expenses\">Expenses</Link>\r\n      </nav>\r\n      <Outlet /> {/*注意点*/}\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 3.路由传参&路由遍历\r\n\r\n```jsx\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n        {/*注意点见 👇*/}\r\n          <Link\r\n            style={{ display: \"block\", margin: \"1rem 0\" }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </Link>\r\n          {/*注意点见 👆*/}\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 4. 设置No Match 路由\r\n\r\n```jsx\r\n<Routes>\r\n  <Route path=\"/\" element={<App />}>\r\n    <Route path=\"expenses\" element={<Expenses />} />\r\n    <Route path=\"invoices\" element={<Invoices />} />\r\n    <Route\r\n      path=\"*\" {/*👈*/}\r\n      element={\r\n        <main style={{ padding: \"1rem\" }}>\r\n          <p>There\'s nothing here!</p>\r\n        </main>\r\n      }\r\n    />\r\n  </Route>\r\n</Routes>\r\n```\r\n\r\n## 5.读取URL参数\r\n\r\n使用**useParams()**\r\n\r\n```jsx\r\n// 跳转到invoice组件\r\n<Link\r\n    to={`/invoices/2312`}\r\n    key={invoice.number}\r\n    >\r\n    {invoice.name}\r\n</Link>\r\n```\r\n\r\n```jsx\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function Invoice() {\r\n  let params = useParams();  // 这边获取到2312\r\n  return <h2>Invoice: {params.invoiceId}</h2>; \r\n}\r\n```\r\n\r\n## 6. Index路由\r\n\r\n当**子路由**中没有一个能和url匹配时，将会走**index**这个子路由\r\n\r\n```jsx\r\n<Routes>\r\n    <Route path=\"/in\" element={<Home />}>\r\n        <Route\r\n            index {/*👈*/}\r\n            element={\r\n                <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>\r\n            }\r\n            />\r\n        <Route path=\":in\" element={<In />} />\r\n    </Route>\r\n    <Route\r\n        path=\"*\"\r\n        element={<NotFound/>}\r\n        />\r\n</Routes>\r\n```\r\n\r\n```jsx\r\nexport default function Home() {\r\n    return (\r\n        <h1>\r\n            Home\r\n            {/*url为/in时，outlet将渲染 <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>*/}\r\n            {/*url为/in/1234时，outlet将渲染 <In />*/}\r\n            <Outlet/>  {/*👈*/}\r\n        </h1>\r\n    );\r\n}\r\n```\r\n\r\n## 7.active Link\r\n常见的使用场景：导航栏\r\n如何使用：<NavLink>\r\n和<Link>的区别： NavLink可以接受isActive\r\n\r\n```jsx\r\n<nav>\r\n    {invoices.map(invoice => (\r\n        <NavLink\r\n            {/*👇*/}\r\n            style={({ isActive }) => { \r\n                return {\r\n                    display: \"block\",\r\n                    margin: \"1rem 0\",\r\n                    color: isActive ? \"red\" : \"\"\r\n                };\r\n            }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n            >\r\n            {invoice.name}\r\n        </NavLink>\r\n    ))}\r\n</nav>\r\n```\r\n```jsx\r\n<NavLink className={({ isActive }) => isActive ? \"red\" : \"blue\"} />\r\n```\r\n\r\n## 8.search params\r\n\r\n用于获取**/shoes?brand=nike&sort=asc&sortby=price**中的值\r\n使用方法：let [searchParams, setSearchParams] = useSearchParams();\r\n		searchParams.get(\'brand\')；\r\n		setSearchParams（{brand}）将会改变 浏览器地址对应brand的值\r\n\r\n```jsx\r\nexport default function Home() {\r\n    let [searchParams, setSearchParams] = useSearchParams();\r\n    return (\r\n        <h1>\r\n            <input\r\n                value={searchParams.get(\"name\") || \"\"}\r\n                onChange={event => {\r\n                    let name = event.target.value;\r\n                    if (name) {\r\n                        setSearchParams({ name });\r\n                    } else {\r\n                        setSearchParams({});\r\n                    }\r\n                }}\r\n            />\r\n            ))}\r\n            Home\r\n        </h1>\r\n    );\r\n}  \r\n```\r\n\r\n## 9.NavLink and useLocation\r\n\r\n组合使用 用来保存跳转过程中url的query保留\r\n```jsx\r\nfunction QueryNavLink({ to, ...props }) {\r\n  let location = useLocation();\r\n  return <NavLink to={to + location.search} {...props} />;\r\n}\r\n```\r\n\r\n## 10. 编程路由跳转\r\n\r\n使用方式：let navigate = useNavigate();\r\n		navigate(\"/invoices\");\r\n\r\n```jsx\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { getInvoice, deleteInvoice } from \"../data\";\r\n\r\nexport default function Invoice() {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <main style={{ padding: \"1rem\" }}>\r\n      <h2>Total Due: {invoice.amount}</h2>\r\n      <p>\r\n        <button\r\n          onClick={() => {\r\n            deleteInvoice(invoice.number);\r\n            navigate(\"/invoices\");\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n```', NULL, 6, 46, 0, '2021-12-24 16:13:21', '2021-12-15 16:13:42', 0);
INSERT INTO `article` VALUES (11, 'React Router 6 aaa', 'qi-xiao-gu', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoic', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoices from \"./routes/invoices\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(\r\n  <BrowserRouter>\r\n    <Routes>\r\n      <Route path=\"/\" element={<App />} />\r\n      <Route path=\"invoices\" element={<Invoices />} />\r\n    </Routes>\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper!</h1>\r\n      {/*使用Link 进行路由跳转跳转*/}\r\n      <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Invoices() {\r\n  return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Invoices</h2>\r\n    </main>\r\n  );\r\n}\r\n```\r\n## 2.嵌套路由\r\n<Route>里面有<Route>,嵌套路由的实现做了两件事\r\n\r\n* 将routes嵌套在被嵌套route内\r\n* 渲染一个Outlet\r\n\r\n```jsx\r\nimport { Outlet, Link } from \"react-router-dom\";\r\n// 这里的App是一个Route\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper</h1>\r\n      <nav\r\n        style={{\r\n          borderBottom: \"solid 1px\",\r\n          paddingBottom: \"1rem\"\r\n        }}\r\n      >\r\n        <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n        <Link to=\"/expenses\">Expenses</Link>\r\n      </nav>\r\n      <Outlet /> {/*注意点*/}\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 3.路由传参&路由遍历\r\n\r\n```jsx\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n        {/*注意点见 👇*/}\r\n          <Link\r\n            style={{ display: \"block\", margin: \"1rem 0\" }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </Link>\r\n          {/*注意点见 👆*/}\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 4. 设置No Match 路由\r\n\r\n```jsx\r\n<Routes>\r\n  <Route path=\"/\" element={<App />}>\r\n    <Route path=\"expenses\" element={<Expenses />} />\r\n    <Route path=\"invoices\" element={<Invoices />} />\r\n    <Route\r\n      path=\"*\" {/*👈*/}\r\n      element={\r\n        <main style={{ padding: \"1rem\" }}>\r\n          <p>There\'s nothing here!</p>\r\n        </main>\r\n      }\r\n    />\r\n  </Route>\r\n</Routes>\r\n```\r\n\r\n## 5.读取URL参数\r\n\r\n使用**useParams()**\r\n\r\n```jsx\r\n// 跳转到invoice组件\r\n<Link\r\n    to={`/invoices/2312`}\r\n    key={invoice.number}\r\n    >\r\n    {invoice.name}\r\n</Link>\r\n```\r\n\r\n```jsx\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function Invoice() {\r\n  let params = useParams();  // 这边获取到2312\r\n  return <h2>Invoice: {params.invoiceId}</h2>; \r\n}\r\n```\r\n\r\n## 6. Index路由\r\n\r\n当**子路由**中没有一个能和url匹配时，将会走**index**这个子路由\r\n\r\n```jsx\r\n<Routes>\r\n    <Route path=\"/in\" element={<Home />}>\r\n        <Route\r\n            index {/*👈*/}\r\n            element={\r\n                <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>\r\n            }\r\n            />\r\n        <Route path=\":in\" element={<In />} />\r\n    </Route>\r\n    <Route\r\n        path=\"*\"\r\n        element={<NotFound/>}\r\n        />\r\n</Routes>\r\n```\r\n\r\n```jsx\r\nexport default function Home() {\r\n    return (\r\n        <h1>\r\n            Home\r\n            {/*url为/in时，outlet将渲染 <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>*/}\r\n            {/*url为/in/1234时，outlet将渲染 <In />*/}\r\n            <Outlet/>  {/*👈*/}\r\n        </h1>\r\n    );\r\n}\r\n```\r\n\r\n## 7.active Link\r\n常见的使用场景：导航栏\r\n如何使用：<NavLink>\r\n和<Link>的区别： NavLink可以接受isActive\r\n\r\n```jsx\r\n<nav>\r\n    {invoices.map(invoice => (\r\n        <NavLink\r\n            {/*👇*/}\r\n            style={({ isActive }) => { \r\n                return {\r\n                    display: \"block\",\r\n                    margin: \"1rem 0\",\r\n                    color: isActive ? \"red\" : \"\"\r\n                };\r\n            }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n            >\r\n            {invoice.name}\r\n        </NavLink>\r\n    ))}\r\n</nav>\r\n```\r\n```jsx\r\n<NavLink className={({ isActive }) => isActive ? \"red\" : \"blue\"} />\r\n```\r\n\r\n## 8.search params\r\n\r\n用于获取**/shoes?brand=nike&sort=asc&sortby=price**中的值\r\n使用方法：let [searchParams, setSearchParams] = useSearchParams();\r\n		searchParams.get(\'brand\')；\r\n		setSearchParams（{brand}）将会改变 浏览器地址对应brand的值\r\n\r\n```jsx\r\nexport default function Home() {\r\n    let [searchParams, setSearchParams] = useSearchParams();\r\n    return (\r\n        <h1>\r\n            <input\r\n                value={searchParams.get(\"name\") || \"\"}\r\n                onChange={event => {\r\n                    let name = event.target.value;\r\n                    if (name) {\r\n                        setSearchParams({ name });\r\n                    } else {\r\n                        setSearchParams({});\r\n                    }\r\n                }}\r\n            />\r\n            ))}\r\n            Home\r\n        </h1>\r\n    );\r\n}  \r\n```\r\n\r\n## 9.NavLink and useLocation\r\n\r\n组合使用 用来保存跳转过程中url的query保留\r\n```jsx\r\nfunction QueryNavLink({ to, ...props }) {\r\n  let location = useLocation();\r\n  return <NavLink to={to + location.search} {...props} />;\r\n}\r\n```\r\n\r\n## 10. 编程路由跳转\r\n\r\n使用方式：let navigate = useNavigate();\r\n		navigate(\"/invoices\");\r\n\r\n```jsx\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { getInvoice, deleteInvoice } from \"../data\";\r\n\r\nexport default function Invoice() {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <main style={{ padding: \"1rem\" }}>\r\n      <h2>Total Due: {invoice.amount}</h2>\r\n      <p>\r\n        <button\r\n          onClick={() => {\r\n            deleteInvoice(invoice.number);\r\n            navigate(\"/invoices\");\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n```', NULL, 6, 28, 0, '2021-12-24 16:01:18', '2021-12-15 15:47:34', 0);
INSERT INTO `article` VALUES (12, '# React Router 6', 'qixiaogu', '**BrowserRouter**必须包裹在整个app的最外层', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoices from \"./routes/invoices\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(\r\n  <BrowserRouter>\r\n    <Routes>\r\n      <Route path=\"/\" element={<App />} />\r\n      <Route path=\"invoices\" element={<Invoices />} />\r\n    </Routes>\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper!</h1>\r\n      {/*使用Link 进行路由跳转跳转*/}\r\n      <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Invoices() {\r\n  return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Invoices</h2>\r\n    </main>\r\n  );\r\n}\r\n```\r\n## 2.嵌套路由\r\n<Route>里面有<Route>,嵌套路由的实现做了两件事\r\n\r\n* 将routes嵌套在被嵌套route内\r\n* 渲染一个Outlet\r\n\r\n```jsx\r\nimport { Outlet, Link } from \"react-router-dom\";\r\n// 这里的App是一个Route\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper</h1>\r\n      <nav\r\n        style={{\r\n          borderBottom: \"solid 1px\",\r\n          paddingBottom: \"1rem\"\r\n        }}\r\n      >\r\n        <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n        <Link to=\"/expenses\">Expenses</Link>\r\n      </nav>\r\n      <Outlet /> {/*注意点*/}\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 3.路由传参&路由遍历\r\n\r\n```jsx\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n        {/*注意点见 👇*/}\r\n          <Link\r\n            style={{ display: \"block\", margin: \"1rem 0\" }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </Link>\r\n          {/*注意点见 👆*/}\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 4. 设置No Match 路由\r\n\r\n```jsx\r\n<Routes>\r\n  <Route path=\"/\" element={<App />}>\r\n    <Route path=\"expenses\" element={<Expenses />} />\r\n    <Route path=\"invoices\" element={<Invoices />} />\r\n    <Route\r\n      path=\"*\" {/*👈*/}\r\n      element={\r\n        <main style={{ padding: \"1rem\" }}>\r\n          <p>There\'s nothing here!</p>\r\n        </main>\r\n      }\r\n    />\r\n  </Route>\r\n</Routes>\r\n```\r\n\r\n## 5.读取URL参数\r\n\r\n使用**useParams()**\r\n\r\n```jsx\r\n// 跳转到invoice组件\r\n<Link\r\n    to={`/invoices/2312`}\r\n    key={invoice.number}\r\n    >\r\n    {invoice.name}\r\n</Link>\r\n```\r\n\r\n```jsx\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function Invoice() {\r\n  let params = useParams();  // 这边获取到2312\r\n  return <h2>Invoice: {params.invoiceId}</h2>; \r\n}\r\n```\r\n\r\n## 6. Index路由\r\n\r\n当**子路由**中没有一个能和url匹配时，将会走**index**这个子路由\r\n\r\n```jsx\r\n<Routes>\r\n    <Route path=\"/in\" element={<Home />}>\r\n        <Route\r\n            index {/*👈*/}\r\n            element={\r\n                <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>\r\n            }\r\n            />\r\n        <Route path=\":in\" element={<In />} />\r\n    </Route>\r\n    <Route\r\n        path=\"*\"\r\n        element={<NotFound/>}\r\n        />\r\n</Routes>\r\n```\r\n\r\n```jsx\r\nexport default function Home() {\r\n    return (\r\n        <h1>\r\n            Home\r\n            {/*url为/in时，outlet将渲染 <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>*/}\r\n            {/*url为/in/1234时，outlet将渲染 <In />*/}\r\n            <Outlet/>  {/*👈*/}\r\n        </h1>\r\n    );\r\n}\r\n```\r\n\r\n## 7.active Link\r\n常见的使用场景：导航栏\r\n如何使用：<NavLink>\r\n和<Link>的区别： NavLink可以接受isActive\r\n\r\n```jsx\r\n<nav>\r\n    {invoices.map(invoice => (\r\n        <NavLink\r\n            {/*👇*/}\r\n            style={({ isActive }) => { \r\n                return {\r\n                    display: \"block\",\r\n                    margin: \"1rem 0\",\r\n                    color: isActive ? \"red\" : \"\"\r\n                };\r\n            }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n            >\r\n            {invoice.name}\r\n        </NavLink>\r\n    ))}\r\n</nav>\r\n```\r\n```jsx\r\n<NavLink className={({ isActive }) => isActive ? \"red\" : \"blue\"} />\r\n```\r\n\r\n## 8.search params\r\n\r\n用于获取**/shoes?brand=nike&sort=asc&sortby=price**中的值\r\n使用方法：let [searchParams, setSearchParams] = useSearchParams();\r\n		searchParams.get(\'brand\')；\r\n		setSearchParams（{brand}）将会改变 浏览器地址对应brand的值\r\n\r\n```jsx\r\nexport default function Home() {\r\n    let [searchParams, setSearchParams] = useSearchParams();\r\n    return (\r\n        <h1>\r\n            <input\r\n                value={searchParams.get(\"name\") || \"\"}\r\n                onChange={event => {\r\n                    let name = event.target.value;\r\n                    if (name) {\r\n                        setSearchParams({ name });\r\n                    } else {\r\n                        setSearchParams({});\r\n                    }\r\n                }}\r\n            />\r\n            ))}\r\n            Home\r\n        </h1>\r\n    );\r\n}  \r\n```\r\n\r\n## 9.NavLink and useLocation\r\n\r\n组合使用 用来保存跳转过程中url的query保留\r\n```jsx\r\nfunction QueryNavLink({ to, ...props }) {\r\n  let location = useLocation();\r\n  return <NavLink to={to + location.search} {...props} />;\r\n}\r\n```\r\n\r\n## 10. 编程路由跳转\r\n\r\n使用方式：let navigate = useNavigate();\r\n		navigate(\"/invoices\");\r\n\r\n```jsx\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { getInvoice, deleteInvoice } from \"../data\";\r\n\r\nexport default function Invoice() {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <main style={{ padding: \"1rem\" }}>\r\n      <h2>Total Due: {invoice.amount}</h2>\r\n      <p>\r\n        <button\r\n          onClick={() => {\r\n            deleteInvoice(invoice.number);\r\n            navigate(\"/invoices\");\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n```', NULL, 6, 10, 0, '2021-12-24 16:14:36', '2021-12-14 13:55:05', 0);
INSERT INTO `article` VALUES (13, '# React Router 6', 'qi-xiao-gu', '# React Router 6\n\n## 1.基础使用\n**BrowserRouter**必须包裹在整个app的最外层\n\n```jsx\nimport { render } from \"react-dom\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route\n} from \"react-router-dom\";\nimport Invoices from \"./r', '# React Router 6\n\n## 1.基础使用\n**BrowserRouter**必须包裹在整个app的最外层\n\n```jsx\nimport { render } from \"react-dom\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route\n} from \"react-router-dom\";\nimport Invoices from \"./routes/invoices\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <BrowserRouter>\n    <Routes>\n      <Route path=\"/\" element={<App />} />\n      <Route path=\"invoices\" element={<Invoices />} />\n    </Routes>\n  </BrowserRouter>,\n  rootElement\n);\n\nexport default function App() {\n  return (\n    <div>\n      <h1>Bookkeeper!</h1>\n      {/*使用Link 进行路由跳转跳转*/}\n      <Link to=\"/invoices\">Invoices</Link> |{\" \"}\n    </div>\n  );\n}\n\nexport default function Invoices() {\n  return (\n    <main style={{ padding: \"1rem 0\" }}>\n      <h2>Invoices</h2>\n    </main>\n  );\n}\n```\n![image](http://192.168.1.102:8000/image-store/0b749b7f96fe571b5db24f98bd934650)\n## 2.嵌套路由\n<Route>里面有<Route>,嵌套路由的实现做了两件事\n\n* 将routes嵌套在被嵌套route内\n* 渲染一个Outlet\n\n```jsx\nimport { Outlet, Link } from \"react-router-dom\";\n// 这里的App是一个Route\nexport default function App() {\n  return (\n    <div>\n      <h1>Bookkeeper</h1>\n      <nav\n        style={{\n          borderBottom: \"solid 1px\",\n          paddingBottom: \"1rem\"\n        }}\n      >\n        <Link to=\"/invoices\">Invoices</Link> |{\" \"}\n        <Link to=\"/expenses\">Expenses</Link>\n      </nav>\n      <Outlet /> {/*注意点*/}\n    </div>\n  );\n}\n```\n\n## 3.路由传参&路由遍历\n\n```jsx\nexport default function Invoices() {\n  let invoices = getInvoices();\n  return (\n    <div style={{ display: \"flex\" }}>\n      <nav\n        style={{\n          borderRight: \"solid 1px\",\n          padding: \"1rem\"\n        }}\n      >\n        {invoices.map(invoice => (\n        {/*注意点见 👇*/}\n          <Link\n            style={{ display: \"block\", margin: \"1rem 0\" }}\n            to={`/invoices/${invoice.number}`}\n            key={invoice.number}\n          >\n            {invoice.name}\n          </Link>\n          {/*注意点见 👆*/}\n        ))}\n      </nav>\n    </div>\n  );\n}\n```\n\n## 4. 设置No Match 路由\n\n```jsx\n<Routes>\n  <Route path=\"/\" element={<App />}>\n    <Route path=\"expenses\" element={<Expenses />} />\n    <Route path=\"invoices\" element={<Invoices />} />\n    <Route\n      path=\"*\" {/*👈*/}\n      element={\n        <main style={{ padding: \"1rem\" }}>\n          <p>There\'s nothing here!</p>\n        </main>\n      }\n    />\n  </Route>\n</Routes>\n```\n\n## 5.读取URL参数\n\n使用**useParams()**\n\n```jsx\n// 跳转到invoice组件\n<Link\n    to={`/invoices/2312`}\n    key={invoice.number}\n    >\n    {invoice.name}\n</Link>\n```\n\n```jsx\nimport { useParams } from \"react-router-dom\";\n\nexport default function Invoice() {\n  let params = useParams();  // 这边获取到2312\n  return <h2>Invoice: {params.invoiceId}</h2>; \n}\n```\n\n## 6. Index路由\n\n当**子路由**中没有一个能和url匹配时，将会走**index**这个子路由\n\n```jsx\n<Routes>\n    <Route path=\"/in\" element={<Home />}>\n        <Route\n            index {/*👈*/}\n            element={\n                <main style={{ padding: \"1rem\" }}>\n                    <p>Select an invoice</p>\n                </main>\n            }\n            />\n        <Route path=\":in\" element={<In />} />\n    </Route>\n    <Route\n        path=\"*\"\n        element={<NotFound/>}\n        />\n</Routes>\n```\n\n```jsx\nexport default function Home() {\n    return (\n        <h1>\n            Home\n            {/*url为/in时，outlet将渲染 <main style={{ padding: \"1rem\" }}>\n                    <p>Select an invoice</p>\n                </main>*/}\n            {/*url为/in/1234时，outlet将渲染 <In />*/}\n            <Outlet/>  {/*👈*/}\n        </h1>\n    );\n}\n```\n\n## 7.active Link\n常见的使用场景：导航栏\n如何使用：<NavLink>\n和<Link>的区别： NavLink可以接受isActive\n\n```jsx\n<nav>\n    {invoices.map(invoice => (\n        <NavLink\n            {/*👇*/}\n            style={({ isActive }) => { \n                return {\n                    display: \"block\",\n                    margin: \"1rem 0\",\n                    color: isActive ? \"red\" : \"\"\n                };\n            }}\n            to={`/invoices/${invoice.number}`}\n            key={invoice.number}\n            >\n            {invoice.name}\n        </NavLink>\n    ))}\n</nav>\n```\n```jsx\n<NavLink className={({ isActive }) => isActive ? \"red\" : \"blue\"} />\n```\n\n## 8.search params\n\n用于获取**/shoes?brand=nike&sort=asc&sortby=price**中的值\n使用方法：let [searchParams, setSearchParams] = useSearchParams();\n		searchParams.get(\'brand\')；\n		setSearchParams（{brand}）将会改变 浏览器地址对应brand的值\n\n```jsx\nexport default function Home() {\n    let [searchParams, setSearchParams] = useSearchParams();\n    return (\n        <h1>\n            <input\n                value={searchParams.get(\"name\") || \"\"}\n                onChange={event => {\n                    let name = event.target.value;\n                    if (name) {\n                        setSearchParams({ name });\n                    } else {\n                        setSearchParams({});\n                    }\n                }}\n            />\n            ))}\n            Home\n        </h1>\n    );\n}  \n```\n\n## 9.NavLink and useLocation\n\n组合使用 用来保存跳转过程中url的query保留\n```jsx\nfunction QueryNavLink({ to, ...props }) {\n  let location = useLocation();\n  return <NavLink to={to + location.search} {...props} />;\n}\n```\n\n## 10. 编程路由跳转\n\n使用方式：let navigate = useNavigate();\n		navigate(\"/invoices\");\n\n```jsx\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { getInvoice, deleteInvoice } from \"../data\";\n\nexport default function Invoice() {\n  let navigate = useNavigate();\n  return (\n    <main style={{ padding: \"1rem\" }}>\n      <h2>Total Due: {invoice.amount}</h2>\n      <p>\n        <button\n          onClick={() => {\n            deleteInvoice(invoice.number);\n            navigate(\"/invoices\");\n          }}\n        >\n          Delete\n        </button>\n      </p>\n    </main>\n  );\n}\n```\n\n![image](http://192.168.1.102:8000/image-store/33a738ede9d3477b6beefb2092ed1a94)', NULL, 6, 23, 0, '2021-12-18 09:50:11', '2021-12-15 16:13:51', 0);
INSERT INTO `article` VALUES (14, '# React Router 6', 'qixiaogu', '**BrowserRouter**必须包裹在整个app的最外层', '# React Router 6\r\n\r\n## 1.基础使用\r\n**BrowserRouter**必须包裹在整个app的最外层\r\n\r\n```jsx\r\nimport { render } from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Invoices from \"./routes/invoices\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(\r\n  <BrowserRouter>\r\n    <Routes>\r\n      <Route path=\"/\" element={<App />} />\r\n      <Route path=\"invoices\" element={<Invoices />} />\r\n    </Routes>\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper!</h1>\r\n      {/*使用Link 进行路由跳转跳转*/}\r\n      <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Invoices() {\r\n  return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Invoices</h2>\r\n    </main>\r\n  );\r\n}\r\n```\r\n## 2.嵌套路由\r\n<Route>里面有<Route>,嵌套路由的实现做了两件事\r\n\r\n* 将routes嵌套在被嵌套route内\r\n* 渲染一个Outlet\r\n\r\n```jsx\r\nimport { Outlet, Link } from \"react-router-dom\";\r\n// 这里的App是一个Route\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Bookkeeper</h1>\r\n      <nav\r\n        style={{\r\n          borderBottom: \"solid 1px\",\r\n          paddingBottom: \"1rem\"\r\n        }}\r\n      >\r\n        <Link to=\"/invoices\">Invoices</Link> |{\" \"}\r\n        <Link to=\"/expenses\">Expenses</Link>\r\n      </nav>\r\n      <Outlet /> {/*注意点*/}\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 3.路由传参&路由遍历\r\n\r\n```jsx\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n        {/*注意点见 👇*/}\r\n          <Link\r\n            style={{ display: \"block\", margin: \"1rem 0\" }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </Link>\r\n          {/*注意点见 👆*/}\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 4. 设置No Match 路由\r\n\r\n```jsx\r\n<Routes>\r\n  <Route path=\"/\" element={<App />}>\r\n    <Route path=\"expenses\" element={<Expenses />} />\r\n    <Route path=\"invoices\" element={<Invoices />} />\r\n    <Route\r\n      path=\"*\" {/*👈*/}\r\n      element={\r\n        <main style={{ padding: \"1rem\" }}>\r\n          <p>There\'s nothing here!</p>\r\n        </main>\r\n      }\r\n    />\r\n  </Route>\r\n</Routes>\r\n```\r\n\r\n## 5.读取URL参数\r\n\r\n使用**useParams()**\r\n\r\n```jsx\r\n// 跳转到invoice组件\r\n<Link\r\n    to={`/invoices/2312`}\r\n    key={invoice.number}\r\n    >\r\n    {invoice.name}\r\n</Link>\r\n```\r\n\r\n```jsx\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function Invoice() {\r\n  let params = useParams();  // 这边获取到2312\r\n  return <h2>Invoice: {params.invoiceId}</h2>; \r\n}\r\n```\r\n\r\n## 6. Index路由\r\n\r\n当**子路由**中没有一个能和url匹配时，将会走**index**这个子路由\r\n\r\n```jsx\r\n<Routes>\r\n    <Route path=\"/in\" element={<Home />}>\r\n        <Route\r\n            index {/*👈*/}\r\n            element={\r\n                <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>\r\n            }\r\n            />\r\n        <Route path=\":in\" element={<In />} />\r\n    </Route>\r\n    <Route\r\n        path=\"*\"\r\n        element={<NotFound/>}\r\n        />\r\n</Routes>\r\n```\r\n\r\n```jsx\r\nexport default function Home() {\r\n    return (\r\n        <h1>\r\n            Home\r\n            {/*url为/in时，outlet将渲染 <main style={{ padding: \"1rem\" }}>\r\n                    <p>Select an invoice</p>\r\n                </main>*/}\r\n            {/*url为/in/1234时，outlet将渲染 <In />*/}\r\n            <Outlet/>  {/*👈*/}\r\n        </h1>\r\n    );\r\n}\r\n```\r\n\r\n## 7.active Link\r\n常见的使用场景：导航栏\r\n如何使用：<NavLink>\r\n和<Link>的区别： NavLink可以接受isActive\r\n\r\n```jsx\r\n<nav>\r\n    {invoices.map(invoice => (\r\n        <NavLink\r\n            {/*👇*/}\r\n            style={({ isActive }) => { \r\n                return {\r\n                    display: \"block\",\r\n                    margin: \"1rem 0\",\r\n                    color: isActive ? \"red\" : \"\"\r\n                };\r\n            }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n            >\r\n            {invoice.name}\r\n        </NavLink>\r\n    ))}\r\n</nav>\r\n```\r\n```jsx\r\n<NavLink className={({ isActive }) => isActive ? \"red\" : \"blue\"} />\r\n```\r\n\r\n## 8.search params\r\n\r\n用于获取**/shoes?brand=nike&sort=asc&sortby=price**中的值\r\n使用方法：let [searchParams, setSearchParams] = useSearchParams();\r\n		searchParams.get(\'brand\')；\r\n		setSearchParams（{brand}）将会改变 浏览器地址对应brand的值\r\n\r\n```jsx\r\nexport default function Home() {\r\n    let [searchParams, setSearchParams] = useSearchParams();\r\n    return (\r\n        <h1>\r\n            <input\r\n                value={searchParams.get(\"name\") || \"\"}\r\n                onChange={event => {\r\n                    let name = event.target.value;\r\n                    if (name) {\r\n                        setSearchParams({ name });\r\n                    } else {\r\n                        setSearchParams({});\r\n                    }\r\n                }}\r\n            />\r\n            ))}\r\n            Home\r\n        </h1>\r\n    );\r\n}  \r\n```\r\n\r\n## 9.NavLink and useLocation\r\n\r\n组合使用 用来保存跳转过程中url的query保留\r\n```jsx\r\nfunction QueryNavLink({ to, ...props }) {\r\n  let location = useLocation();\r\n  return <NavLink to={to + location.search} {...props} />;\r\n}\r\n```\r\n\r\n## 10. 编程路由跳转\r\n\r\n使用方式：let navigate = useNavigate();\r\n		navigate(\"/invoices\");\r\n\r\n```jsx\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { getInvoice, deleteInvoice } from \"../data\";\r\n\r\nexport default function Invoice() {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <main style={{ padding: \"1rem\" }}>\r\n      <h2>Total Due: {invoice.amount}</h2>\r\n      <p>\r\n        <button\r\n          onClick={() => {\r\n            deleteInvoice(invoice.number);\r\n            navigate(\"/invoices\");\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n```', NULL, 6, 10, 0, '2021-12-24 15:47:02', '2021-12-14 13:54:30', 0);
INSERT INTO `article` VALUES (42, 'leetcode', 'qi-xiao-gu', NULL, '**https://leetcode-cn.com/problems/container-with-most-water/**\n\nhttps://leetcode-cn.com/problems/move-zeroes/\nhttps://leetcode.com/problems/climbing-stairs/\nhttps://leetcode-cn.com/problems/3sum/\nhttps://leetcode-cn.com/problems/container-with-most-water/\nhttps://leetcode-cn.com/problems/move-zeroes/\nhttps://leetcode.com/problems/climbing-stairs/\nhttps://leetcode-cn.com/problems/3sum/\nhttps://leetcode-cn.com/problems/two-sum/\nArray 实战题目\nhttps://leetcode-cn.com/problems/container-with-most-water/\nhttps://leetcode-cn.com/problems/move-zeroes/\nhttps://leetcode.com/problems/climbing-stairs/\nhttps://leetcode-cn.com/problems/3sum(高频老题）\nLinked List 实战题目\nhttps://leetcode.com/problems/reverse-linked-list/\nhttps://leetcode.com/problems/swap-nodes-in-pairs\nhttps://leetcode.com/problems/linked-list-cycle\nhttps://leetcode.com/problems/linked-list-cycle-ii\nhttps://leetcode.com/problems/reverse-nodes-in-k-group/\n课后作业\nhttps://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/\nhttps://leetcode-cn.com/problems/rotate-array/\nhttps://leetcode-cn.com/problems/merge-two-sorted-lists/\nhttps://leetcode-cn.com/problems/merge-sorted-array/\nhttps://leetcode-cn.com/problems/two-sum/\nhttps://leetcode-cn.com/problems/move-zeroes/\nhttps://leetcode-cn.com/problems/plus-one/\nJava 的 PriorityQueue 文档\nhttp://docs.oracle.com/javase/10/docs/api/java/util/PriorityQueue.html\nJava 的 Stack 源码\nhttp://developer.classpath.org/doc/java/util/Stack-source.html\nJava 的 Queue 源码\nhttp://fuseyism.com/classpath/doc/java/util/Queue-source.html\nPython 的 heapq\nhttp://docs.python.org/2/library/heapq.html\n高性能的 container 库\nhttps://leetcode-cn.com/problems/valid-anagram/description/\nhttps://leetcode-cn.com/problems/group-anagrams/\nhttps://leetcode-cn.com/problems/two-sum/description/\nhttps://leetcode-cn.com/problems/binary-tree-inorder-traversal/\nhttps://leetcode-cn.com/problems/binary-tree-preorder-traversal/\nhttps://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/\nhttps://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/\nhttps://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/\n实战题目\nhttps://leetcode-cn.com/problems/climbing-stairs/\nhttps://leetcode-cn.com/problems/generate-parentheses/\nhttps://leetcode-cn.com/problems/invert-binary-tree/description/\nhttps://leetcode-cn.com/problems/validate-binary-search-tree\nhttps://leetcode-cn.com/problems/maximum-depth-of-binary-tree\nhttps://leetcode-cn.com/problems/minimum-depth-of-binary-tree\nhttps://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/\n每日一课\n如何优雅地计算斐波那契数列\n课后作业\nhttps://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/\nhttps://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal\nhttps://leetcode-cn.com/problems/combinations/\nhttps://leetcode-cn.com/problems/permutations/\nhttps://leetcode-cn.com/problems/permutations-ii/\nhttps://leetcode-cn.com/problems/powx-n/\nhttps://leetcode-cn.com/problems/subsets/\nhttps://leetcode-cn.com/problems/majority-element/description/?（简单、但是高频）\nhttps://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/\nhttps://leetcode-cn.com/problems/n-queens/\n实战题目\nhttps://leetcode-cn.com/problems/binary-tree-level-order-traversal/#/description\nhttps://leetcode-cn.com/problems/minimum-genetic-mutation/#/description\nhttps://leetcode-cn.com/problems/generate-parentheses/#/description\nhttps://leetcode-cn.com/problems/find-largest-value-in-each-tree-row/#/description\n课后作业\nhttps://leetcode-cn.com/problems/word-ladder/description/\nhttps://leetcode-cn.com/problems/word-ladder-ii/description/\nhttps://leetcode-cn.com/problems/number-of-islands/\nhttps://leetcode-cn.com/problems/minesweeper/description/\n参考链接\ncoin change 题目https://leetcode-cn.com/problems/coin-change/\n动态规划定义https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\n课后作业\nhttps://leetcode-cn.com/problems/lemonade-change/description/\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/description/\nhttps://leetcode-cn.com/problems/assign-cookies/description/\nhttps://leetcode-cn.com/problems/walking-robot-simulation/description/\nhttps://leetcode-cn.com/problems/jump-game/?、?https://leetcode-cn.com/problems/jump-game-ii/\n\n实战题目\nhttps://leetcode-cn.com/problems/sqrtx/\nhttps://leetcode-cn.com/problems/valid-perfect-square/\n课后作业\nhttps://leetcode-cn.com/problems/search-in-rotated-sorted-array/\nhttps://leetcode-cn.com/problems/search-a-2d-matrix/\nhttps://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/\n不同路径题目https://leetcode-cn.com/problems/unique-paths/\n不同路径 2 题目https://leetcode-cn.com/problems/unique-paths-ii/\n最长公共子序列题目https://leetcode-cn.com/problems/longest-common-subsequence/\nMIT 动态规划课程最短路径算法https://www.bilibili.com/video/av53233912?from=search&seid=2847395688604491997\n实战题目\nhttps://leetcode-cn.com/problems/climbing-stairs/description/\nhttps://leetcode-cn.com/problems/triangle/description/\nhttps://leetcode.com/problems/triangle/discuss/38735/Python-easy-to-understand-solutions-(top-down-bottom-up)\nhttps://leetcode-cn.com/problems/maximum-subarray/\nhttps://leetcode-cn.com/problems/maximum-product-subarray/description/\nhttps://leetcode-cn.com/problems/coin-change/description/\n实战题目\nhttps://leetcode-cn.com/problems/climbing-stairs/description/\nhttps://leetcode-cn.com/problems/triangle/description/\nhttps://leetcode.com/problems/triangle/discuss/38735/Python-easy-to-understand-solutions-(top-down-bottom-up)\nhttps://leetcode-cn.com/problems/maximum-subarray/\nhttps://leetcode-cn.com/problems/maximum-product-subarray/description/\nhttps://leetcode-cn.com/problems/coin-change/description/\n实战题目\nhttps://leetcode-cn.com/problems/house-robber/\nhttps://leetcode-cn.com/problems/house-robber-ii/description/\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/#/description\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-3/\n高级 DP 实战题目\nhttps://leetcode-cn.com/problems/perfect-squares/\nhttps://leetcode-cn.com/problems/edit-distance/?（重点）\nhttps://leetcode-cn.com/problems/jump-game/\nhttps://leetcode-cn.com/problems/jump-game-ii/\nhttps://leetcode-cn.com/problems/unique-paths/\nhttps://leetcode-cn.com/problems/unique-paths-ii/\nhttps://leetcode-cn.com/problems/unique-paths-iii/\nhttps://leetcode-cn.com/problems/coin-change/\nhttps://leetcode-cn.com/problems/coin-change-2/\n注意：请大家先消化前面的实战题目，高级 DP 的方法和题解会在课程后面解锁。\n课后作业\nhttps://leetcode-cn.com/problems/longest-valid-parentheses/\nhttps://leetcode-cn.com/problems/minimum-path-sum/\nhttps://leetcode-cn.com/problems/edit-distance/\nhttps://leetcode-cn.com/problems/decode-ways\nhttps://leetcode-cn.com/problems/maximal-square/\nhttps://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k/\nhttps://leetcode-cn.com/problems/frog-jump/\nhttps://leetcode-cn.com/problems/split-array-largest-sum\nhttps://leetcode-cn.com/problems/student-attendance-record-ii/\nhttps://leetcode-cn.com/problems/task-scheduler/\nhttps://leetcode-cn.com/problems/palindromic-substrings/\nhttps://leetcode-cn.com/problems/minimum-window-substring/\nhttps://leetcode-cn.com/problems/burst-balloons/\n?	二叉树的层次遍历https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\n?	实现 Triehttps://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/\n?	Tire 树代码模板https://shimo.im/docs/Pk6vPY3HJ9hKkh33\n实战题目 / 课后作业\nhttps://leetcode-cn.com/problems/implement-trie-prefix-tree/#/description\nhttps://leetcode-cn.com/problems/word-search-ii/\n分析单词搜索 2 用 Tire 树方式实现的时间复杂度，请同学们提交在第 6 周的学习总结中。\n参考链接\n岛屿数量https://leetcode-cn.com/problems/number-of-islands/\n并查集代码模板https://shimo.im/docs/ydPCH33xDhK9YwWR\n实战题目 / 课后作业\nhttps://leetcode-cn.com/problems/friend-circles\nhttps://leetcode-cn.com/problems/number-of-islands/\nhttps://leetcode-cn.com/problems/surrounded-regions/\nDFS 代码模板http://shimo.im/docs/ddgwCccJQKxkrcTq/\nBFS 代码模板http://shimo.im/docs/P8TqKHGKt3ytkYYd/\nAlphaZero Explainedhttps://nikcheerla.github.io/deeplearningschool/2018/01/01/AlphaZero-Explained/\n棋类复杂度https://en.wikipedia.org/wiki/Game_complexity\n实战题目\nhttps://leetcode-cn.com/problems/climbing-stairs/\nhttps://leetcode-cn.com/problems/generate-parentheses/\nhttps://leetcode-cn.com/problems/n-queens\nhttps://leetcode-cn.com/problems/valid-sudoku/description/\nhttps://leetcode-cn.com/problems/sudoku-solver/#/description\n实战题目\nhttps://leetcode-cn.com/problems/word-ladder/\nhttps://leetcode-cn.com/problems/minimum-genetic-mutation/\n课后作业\n总结双向 BFS 代码模版，请同学们提交在第 6 周学习总结中。\n参考链接\nA* 代码模板https://shimo.im/docs/CXvjHyWhpQcxXjcw/\n相似度测量方法https://dataaspirant.com/2015/04/11/five-most-popular-similarity-measures-implementation-in-python/\n二进制矩阵中的最短路径的 A* 解法https://leetcode.com/problems/shortest-path-in-binary-matrix/discuss/313347/A*-search-in-Python\n8 puzzles 解法比较https://zxi.mytechroad.com/blog/searching/8-puzzles-bidirectional-astar-vs-bidirectional-bfs/\n实战题目\nhttps://leetcode-cn.com/problems/shortest-path-in-binary-matrix/\nhttps://leetcode-cn.com/problems/sliding-puzzle/\nhttps://leetcode-cn.com/problems/sudoku-solver/\n参考链接\nN 皇后位运算代码示例https://shimo.im/docs/rHTyt8hcpT6D9Tj8/\n实战题目 / 课后作业\nhttps://leetcode-cn.com/problems/number-of-1-bits/\nhttps://leetcode-cn.com/problems/power-of-two/\nhttps://leetcode-cn.com/problems/reverse-bits/\nhttps://leetcode-cn.com/problems/n-queens/description/\nhttps://leetcode-cn.com/problems/n-queens-ii/description/\nhttps://leetcode-cn.com/problems/counting-bits/description/\n\n参考链接\nUnderstanding the Meltdown exploithttps://www.sqlpassion.at/archive/2018/01/06/understanding-the-meltdown-exploit-in-my-own-simple-words/\n替换算法总揽https://en.wikipedia.org/wiki/Cache_replacement_policies\nLRU Cache Python 代码示例https://shimo.im/docs/tTxRkGwJpXG6WkGY/\n实战题目 / 课后作业\nhttps://leetcode-cn.com/problems/lru-cache/#/\n参考链接\n爬楼梯https://leetcode-cn.com/problems/climbing-stairs/\n不同路径https://leetcode-cn.com/problems/unique-paths/\n打家劫舍https://leetcode-cn.com/problems/house-robber/\n最小路径和https://leetcode-cn.com/problems/minimum-path-sum/\n股票买卖https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/\n参考链接\n爬楼梯https://leetcode-cn.com/problems/climbing-stairs/\n使用最小花费爬楼梯https://leetcode-cn.com/problems/min-cost-climbing-stairs/\n编辑距离https://leetcode-cn.com/problems/edit-distance/\n课后作业\nhttps://leetcode-cn.com/problems/longest-increasing-subsequence/\nhttps://leetcode-cn.com/problems/decode-ways/\nhttps://leetcode-cn.com/problems/longest-valid-parentheses/\nhttps://leetcode-cn.com/problems/maximal-rectangle/\nhttps://leetcode-cn.com/problems/distinct-subsequences/\nhttps://leetcode-cn.com/problems/race-car/\n参考链接\n不可变字符串https://lemire.me/blog/2017/07/07/are-your-strings-immutable/\nAtoi 代码示例https://shimo.im/docs/KkDKkpWxjjrJXdpY/\n字符串基础问题\nhttps://leetcode-cn.com/problems/to-lower-case/\nhttps://leetcode-cn.com/problems/length-of-last-word/\nhttps://leetcode-cn.com/problems/jewels-and-stones/\nhttps://leetcode-cn.com/problems/first-unique-character-in-a-string/\nhttps://leetcode-cn.com/problems/string-to-integer-atoi/\n字符串操作问题\nhttps://leetcode-cn.com/problems/longest-common-prefix/description/\nhttps://leetcode-cn.com/problems/reverse-string\nhttps://leetcode-cn.com/problems/reverse-string-ii/\nhttps://leetcode-cn.com/problems/reverse-words-in-a-string/\nhttps://leetcode-cn.com/problems/reverse-words-in-a-string-iii/\nhttps://leetcode-cn.com/problems/reverse-only-letters/\n异位词问题\nhttps://leetcode-cn.com/problems/valid-anagram/\nhttps://leetcode-cn.com/problems/group-anagrams/\nhttps://leetcode-cn.com/problems/find-all-anagrams-in-a-string/\n回文串问题\nhttps://leetcode-cn.com/problems/valid-palindrome/\nhttps://leetcode-cn.com/problems/valid-palindrome-ii/\nhttps://leetcode-cn.com/problems/longest-palindromic-substring/\n最长子串、子序列问题\nhttps://leetcode-cn.com/problems/longest-common-subsequence/\nhttps://leetcode-cn.com/problems/edit-distance/\nhttps://leetcode-cn.com/problems/longest-palindromic-substring/\n字符串 +DP 问题\nhttps://leetcode-cn.com/problems/regular-expression-matching/\nhttps://leetcode-cn.com/problems/regular-expression-matching/solution/ji-yu-guan-fang-ti-jie-gen-xiang-xi-de-jiang-jie-b/\nhttps://leetcode-cn.com/problems/wildcard-matching/\nhttps://leetcode-cn.com/problems/distinct-subsequences/\n参考链接\nBoyer-Moore 算法http://xn--https-ni33a//www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html\nSunday 算法https://blog.csdn.net/u012505432/article/details/52210975\n字符串匹配暴力法代码示例https://shimo.im/docs/dQDxQW8yXPXxh3Hg/\nRabin-Karp 代码示例https://shimo.im/docs/KXDdkT99TVtXvTXP/\nKMP 字符串匹配算法视频https://www.bilibili.com/video/av11866460?from=search&seid=17425875345653862171\n字符串匹配的 KMP 算法http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html\n课后作业\nhttps://leetcode-cn.com/problems/first-unique-character-in-a-string/\nhttps://leetcode-cn.com/problems/string-to-integer-atoi/\nhttps://leetcode-cn.com/problems/reverse-string-ii/\nhttps://leetcode-cn.com/problems/reverse-words-in-a-string/\nhttps://leetcode-cn.com/problems/reverse-words-in-a-string-iii/\nhttps://leetcode-cn.com/problems/reverse-only-letters/\nhttps://leetcode-cn.com/problems/find-all-anagrams-in-a-string/\nhttps://leetcode-cn.com/problems/longest-palindromic-substring/\nhttps://leetcode-cn.com/problems/isomorphic-strings/\nhttps://leetcode-cn.com/problems/valid-palindrome-ii/\nhttps://leetcode-cn.com/problems/wildcard-matching\nhttps://leetcode-cn.com/problems/longest-valid-parentheses\nhttps://leetcode-cn.com/problems/distinct-subsequences/', 0, 8, 85, 0, '2021-12-24 16:15:30', '2021-12-16 12:39:18', 0);
INSERT INTO `article` VALUES (43, 'leetcode', 'qi-xiao-gu', '**https://leetcode-cn.com/problems/container-with-most-water/**\n\nhttps://leetcode-cn.com/problems/move-zeroes/\nhttps://leetcode.com/problems/climbing-stairs/\nhttps://leetcode-cn.com/problems/3sum/\nhtt', '**https://leetcode-cn.com/problems/container-with-most-water/**\n\nhttps://leetcode-cn.com/problems/move-zeroes/\nhttps://leetcode.com/problems/climbing-stairs/\nhttps://leetcode-cn.com/problems/3sum/\nhttps://leetcode-cn.com/problems/container-with-most-water/\nhttps://leetcode-cn.com/problems/move-zeroes/\nhttps://leetcode.com/problems/climbing-stairs/\nhttps://leetcode-cn.com/problems/3sum/\nhttps://leetcode-cn.com/problems/two-sum/\nArray 实战题目\nhttps://leetcode-cn.com/problems/container-with-most-water/\nhttps://leetcode-cn.com/problems/move-zeroes/\nhttps://leetcode.com/problems/climbing-stairs/\nhttps://leetcode-cn.com/problems/3sum(高频老题）\nLinked List 实战题目\nhttps://leetcode.com/problems/reverse-linked-list/\nhttps://leetcode.com/problems/swap-nodes-in-pairs\nhttps://leetcode.com/problems/linked-list-cycle\nhttps://leetcode.com/problems/linked-list-cycle-ii\nhttps://leetcode.com/problems/reverse-nodes-in-k-group/\n课后作业\nhttps://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/\nhttps://leetcode-cn.com/problems/rotate-array/\nhttps://leetcode-cn.com/problems/merge-two-sorted-lists/\nhttps://leetcode-cn.com/problems/merge-sorted-array/\nhttps://leetcode-cn.com/problems/two-sum/\nhttps://leetcode-cn.com/problems/move-zeroes/\nhttps://leetcode-cn.com/problems/plus-one/\nJava 的 PriorityQueue 文档\nhttp://docs.oracle.com/javase/10/docs/api/java/util/PriorityQueue.html\nJava 的 Stack 源码\nhttp://developer.classpath.org/doc/java/util/Stack-source.html\nJava 的 Queue 源码\nhttp://fuseyism.com/classpath/doc/java/util/Queue-source.html\nPython 的 heapq\nhttp://docs.python.org/2/library/heapq.html\n高性能的 container 库\nhttps://leetcode-cn.com/problems/valid-anagram/description/\nhttps://leetcode-cn.com/problems/group-anagrams/\nhttps://leetcode-cn.com/problems/two-sum/description/\nhttps://leetcode-cn.com/problems/binary-tree-inorder-traversal/\nhttps://leetcode-cn.com/problems/binary-tree-preorder-traversal/\nhttps://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/\nhttps://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/\nhttps://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/\n实战题目\nhttps://leetcode-cn.com/problems/climbing-stairs/\nhttps://leetcode-cn.com/problems/generate-parentheses/\nhttps://leetcode-cn.com/problems/invert-binary-tree/description/\nhttps://leetcode-cn.com/problems/validate-binary-search-tree\nhttps://leetcode-cn.com/problems/maximum-depth-of-binary-tree\nhttps://leetcode-cn.com/problems/minimum-depth-of-binary-tree\nhttps://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/\n每日一课\n如何优雅地计算斐波那契数列\n课后作业\nhttps://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/\nhttps://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal\nhttps://leetcode-cn.com/problems/combinations/\nhttps://leetcode-cn.com/problems/permutations/\nhttps://leetcode-cn.com/problems/permutations-ii/\nhttps://leetcode-cn.com/problems/powx-n/\nhttps://leetcode-cn.com/problems/subsets/\nhttps://leetcode-cn.com/problems/majority-element/description/?（简单、但是高频）\nhttps://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/\nhttps://leetcode-cn.com/problems/n-queens/\n实战题目\nhttps://leetcode-cn.com/problems/binary-tree-level-order-traversal/#/description\nhttps://leetcode-cn.com/problems/minimum-genetic-mutation/#/description\nhttps://leetcode-cn.com/problems/generate-parentheses/#/description\nhttps://leetcode-cn.com/problems/find-largest-value-in-each-tree-row/#/description\n课后作业\nhttps://leetcode-cn.com/problems/word-ladder/description/\nhttps://leetcode-cn.com/problems/word-ladder-ii/description/\nhttps://leetcode-cn.com/problems/number-of-islands/\nhttps://leetcode-cn.com/problems/minesweeper/description/\n参考链接\ncoin change 题目https://leetcode-cn.com/problems/coin-change/\n动态规划定义https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\n课后作业\nhttps://leetcode-cn.com/problems/lemonade-change/description/\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/description/\nhttps://leetcode-cn.com/problems/assign-cookies/description/\nhttps://leetcode-cn.com/problems/walking-robot-simulation/description/\nhttps://leetcode-cn.com/problems/jump-game/?、?https://leetcode-cn.com/problems/jump-game-ii/\n\n实战题目\nhttps://leetcode-cn.com/problems/sqrtx/\nhttps://leetcode-cn.com/problems/valid-perfect-square/\n课后作业\nhttps://leetcode-cn.com/problems/search-in-rotated-sorted-array/\nhttps://leetcode-cn.com/problems/search-a-2d-matrix/\nhttps://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/\n不同路径题目https://leetcode-cn.com/problems/unique-paths/\n不同路径 2 题目https://leetcode-cn.com/problems/unique-paths-ii/\n最长公共子序列题目https://leetcode-cn.com/problems/longest-common-subsequence/\nMIT 动态规划课程最短路径算法https://www.bilibili.com/video/av53233912?from=search&seid=2847395688604491997\n实战题目\nhttps://leetcode-cn.com/problems/climbing-stairs/description/\nhttps://leetcode-cn.com/problems/triangle/description/\nhttps://leetcode.com/problems/triangle/discuss/38735/Python-easy-to-understand-solutions-(top-down-bottom-up)\nhttps://leetcode-cn.com/problems/maximum-subarray/\nhttps://leetcode-cn.com/problems/maximum-product-subarray/description/\nhttps://leetcode-cn.com/problems/coin-change/description/\n实战题目\nhttps://leetcode-cn.com/problems/climbing-stairs/description/\nhttps://leetcode-cn.com/problems/triangle/description/\nhttps://leetcode.com/problems/triangle/discuss/38735/Python-easy-to-understand-solutions-(top-down-bottom-up)\nhttps://leetcode-cn.com/problems/maximum-subarray/\nhttps://leetcode-cn.com/problems/maximum-product-subarray/description/\nhttps://leetcode-cn.com/problems/coin-change/description/\n实战题目\nhttps://leetcode-cn.com/problems/house-robber/\nhttps://leetcode-cn.com/problems/house-robber-ii/description/\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/#/description\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\nhttps://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-3/\n高级 DP 实战题目\nhttps://leetcode-cn.com/problems/perfect-squares/\nhttps://leetcode-cn.com/problems/edit-distance/?（重点）\nhttps://leetcode-cn.com/problems/jump-game/\nhttps://leetcode-cn.com/problems/jump-game-ii/\nhttps://leetcode-cn.com/problems/unique-paths/\nhttps://leetcode-cn.com/problems/unique-paths-ii/\nhttps://leetcode-cn.com/problems/unique-paths-iii/\nhttps://leetcode-cn.com/problems/coin-change/\nhttps://leetcode-cn.com/problems/coin-change-2/\n注意：请大家先消化前面的实战题目，高级 DP 的方法和题解会在课程后面解锁。\n课后作业\nhttps://leetcode-cn.com/problems/longest-valid-parentheses/\nhttps://leetcode-cn.com/problems/minimum-path-sum/\nhttps://leetcode-cn.com/problems/edit-distance/\nhttps://leetcode-cn.com/problems/decode-ways\nhttps://leetcode-cn.com/problems/maximal-square/\nhttps://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k/\nhttps://leetcode-cn.com/problems/frog-jump/\nhttps://leetcode-cn.com/problems/split-array-largest-sum\nhttps://leetcode-cn.com/problems/student-attendance-record-ii/\nhttps://leetcode-cn.com/problems/task-scheduler/\nhttps://leetcode-cn.com/problems/palindromic-substrings/\nhttps://leetcode-cn.com/problems/minimum-window-substring/\nhttps://leetcode-cn.com/problems/burst-balloons/\n?	二叉树的层次遍历https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\n?	实现 Triehttps://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/\n?	Tire 树代码模板https://shimo.im/docs/Pk6vPY3HJ9hKkh33\n实战题目 / 课后作业\nhttps://leetcode-cn.com/problems/implement-trie-prefix-tree/#/description\nhttps://leetcode-cn.com/problems/word-search-ii/\n分析单词搜索 2 用 Tire 树方式实现的时间复杂度，请同学们提交在第 6 周的学习总结中。\n参考链接\n岛屿数量https://leetcode-cn.com/problems/number-of-islands/\n并查集代码模板https://shimo.im/docs/ydPCH33xDhK9YwWR\n实战题目 / 课后作业\nhttps://leetcode-cn.com/problems/friend-circles\nhttps://leetcode-cn.com/problems/number-of-islands/\nhttps://leetcode-cn.com/problems/surrounded-regions/\nDFS 代码模板http://shimo.im/docs/ddgwCccJQKxkrcTq/\nBFS 代码模板http://shimo.im/docs/P8TqKHGKt3ytkYYd/\nAlphaZero Explainedhttps://nikcheerla.github.io/deeplearningschool/2018/01/01/AlphaZero-Explained/\n棋类复杂度https://en.wikipedia.org/wiki/Game_complexity\n实战题目\nhttps://leetcode-cn.com/problems/climbing-stairs/\nhttps://leetcode-cn.com/problems/generate-parentheses/\nhttps://leetcode-cn.com/problems/n-queens\nhttps://leetcode-cn.com/problems/valid-sudoku/description/\nhttps://leetcode-cn.com/problems/sudoku-solver/#/description\n实战题目\nhttps://leetcode-cn.com/problems/word-ladder/\nhttps://leetcode-cn.com/problems/minimum-genetic-mutation/\n课后作业\n总结双向 BFS 代码模版，请同学们提交在第 6 周学习总结中。\n参考链接\nA* 代码模板https://shimo.im/docs/CXvjHyWhpQcxXjcw/\n相似度测量方法https://dataaspirant.com/2015/04/11/five-most-popular-similarity-measures-implementation-in-python/\n二进制矩阵中的最短路径的 A* 解法https://leetcode.com/problems/shortest-path-in-binary-matrix/discuss/313347/A*-search-in-Python\n8 puzzles 解法比较https://zxi.mytechroad.com/blog/searching/8-puzzles-bidirectional-astar-vs-bidirectional-bfs/\n实战题目\nhttps://leetcode-cn.com/problems/shortest-path-in-binary-matrix/\nhttps://leetcode-cn.com/problems/sliding-puzzle/\nhttps://leetcode-cn.com/problems/sudoku-solver/\n参考链接\nN 皇后位运算代码示例https://shimo.im/docs/rHTyt8hcpT6D9Tj8/\n实战题目 / 课后作业\nhttps://leetcode-cn.com/problems/number-of-1-bits/\nhttps://leetcode-cn.com/problems/power-of-two/\nhttps://leetcode-cn.com/problems/reverse-bits/\nhttps://leetcode-cn.com/problems/n-queens/description/\nhttps://leetcode-cn.com/problems/n-queens-ii/description/\nhttps://leetcode-cn.com/problems/counting-bits/description/\n\n参考链接\nUnderstanding the Meltdown exploithttps://www.sqlpassion.at/archive/2018/01/06/understanding-the-meltdown-exploit-in-my-own-simple-words/\n替换算法总揽https://en.wikipedia.org/wiki/Cache_replacement_policies\nLRU Cache Python 代码示例https://shimo.im/docs/tTxRkGwJpXG6WkGY/\n实战题目 / 课后作业\nhttps://leetcode-cn.com/problems/lru-cache/#/\n参考链接\n爬楼梯https://leetcode-cn.com/problems/climbing-stairs/\n不同路径https://leetcode-cn.com/problems/unique-paths/\n打家劫舍https://leetcode-cn.com/problems/house-robber/\n最小路径和https://leetcode-cn.com/problems/minimum-path-sum/\n股票买卖https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/\n参考链接\n爬楼梯https://leetcode-cn.com/problems/climbing-stairs/\n使用最小花费爬楼梯https://leetcode-cn.com/problems/min-cost-climbing-stairs/\n编辑距离https://leetcode-cn.com/problems/edit-distance/\n课后作业\nhttps://leetcode-cn.com/problems/longest-increasing-subsequence/\nhttps://leetcode-cn.com/problems/decode-ways/\nhttps://leetcode-cn.com/problems/longest-valid-parentheses/\nhttps://leetcode-cn.com/problems/maximal-rectangle/\nhttps://leetcode-cn.com/problems/distinct-subsequences/\nhttps://leetcode-cn.com/problems/race-car/\n参考链接\n不可变字符串https://lemire.me/blog/2017/07/07/are-your-strings-immutable/\nAtoi 代码示例https://shimo.im/docs/KkDKkpWxjjrJXdpY/\n字符串基础问题\nhttps://leetcode-cn.com/problems/to-lower-case/\nhttps://leetcode-cn.com/problems/length-of-last-word/\nhttps://leetcode-cn.com/problems/jewels-and-stones/\nhttps://leetcode-cn.com/problems/first-unique-character-in-a-string/\nhttps://leetcode-cn.com/problems/string-to-integer-atoi/\n字符串操作问题\nhttps://leetcode-cn.com/problems/longest-common-prefix/description/\nhttps://leetcode-cn.com/problems/reverse-string\nhttps://leetcode-cn.com/problems/reverse-string-ii/\nhttps://leetcode-cn.com/problems/reverse-words-in-a-string/\nhttps://leetcode-cn.com/problems/reverse-words-in-a-string-iii/\nhttps://leetcode-cn.com/problems/reverse-only-letters/\n异位词问题\nhttps://leetcode-cn.com/problems/valid-anagram/\nhttps://leetcode-cn.com/problems/group-anagrams/\nhttps://leetcode-cn.com/problems/find-all-anagrams-in-a-string/\n回文串问题\nhttps://leetcode-cn.com/problems/valid-palindrome/\nhttps://leetcode-cn.com/problems/valid-palindrome-ii/\nhttps://leetcode-cn.com/problems/longest-palindromic-substring/\n最长子串、子序列问题\nhttps://leetcode-cn.com/problems/longest-common-subsequence/\nhttps://leetcode-cn.com/problems/edit-distance/\nhttps://leetcode-cn.com/problems/longest-palindromic-substring/\n字符串 +DP 问题\nhttps://leetcode-cn.com/problems/regular-expression-matching/\nhttps://leetcode-cn.com/problems/regular-expression-matching/solution/ji-yu-guan-fang-ti-jie-gen-xiang-xi-de-jiang-jie-b/\nhttps://leetcode-cn.com/problems/wildcard-matching/\nhttps://leetcode-cn.com/problems/distinct-subsequences/\n参考链接\nBoyer-Moore 算法http://xn--https-ni33a//www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html\nSunday 算法https://blog.csdn.net/u012505432/article/details/52210975\n字符串匹配暴力法代码示例https://shimo.im/docs/dQDxQW8yXPXxh3Hg/\nRabin-Karp 代码示例https://shimo.im/docs/KXDdkT99TVtXvTXP/\nKMP 字符串匹配算法视频https://www.bilibili.com/video/av11866460?from=search&seid=17425875345653862171\n字符串匹配的 KMP 算法http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html\n课后作业\nhttps://leetcode-cn.com/problems/first-unique-character-in-a-string/\nhttps://leetcode-cn.com/problems/string-to-integer-atoi/\nhttps://leetcode-cn.com/problems/reverse-string-ii/\nhttps://leetcode-cn.com/problems/reverse-words-in-a-string/\nhttps://leetcode-cn.com/problems/reverse-words-in-a-string-iii/\nhttps://leetcode-cn.com/problems/reverse-only-letters/\nhttps://leetcode-cn.com/problems/find-all-anagrams-in-a-string/\nhttps://leetcode-cn.com/problems/longest-palindromic-substring/\nhttps://leetcode-cn.com/problems/isomorphic-strings/\nhttps://leetcode-cn.com/problems/valid-palindrome-ii/\nhttps://leetcode-cn.com/problems/wildcard-matching\nhttps://leetcode-cn.com/problems/longest-valid-parentheses\nhttps://leetcode-cn.com/problems/distinct-subsequences/', 0, 8, 120, 0, '2021-12-29 13:50:43', '2021-12-16 13:28:31', 0);
INSERT INTO `article` VALUES (44, 'VUEEEEEEEEEEE', 'qi-xiao-gu', '近几年，互联网发生着翻天覆地的变化，尤其是我们一直习以为常的HTTP协议，在逐渐的被HTTPS协议所取代，在浏览器、搜索引擎、CA机构、大型互联网企业的共同促进下，互联网迎来了“HTTPS加密时代”，HTTPS将在未来的几年内全面取代HTTP成为传输协议的主流。\n读完本文，希望你能明白：\n	• HTTP通信存在什么问题\n	• HTTPS如何改进HTTP存在那些问题\n	• HTTPS工作原理是什么\n', '近几年，互联网发生着翻天覆地的变化，尤其是我们一直习以为常的HTTP协议，在逐渐的被HTTPS协议所取代，在浏览器、搜索引擎、CA机构、大型互联网企业的共同促进下，互联网迎来了“HTTPS加密时代”，HTTPS将在未来的几年内全面取代HTTP成为传输协议的主流。\n读完本文，希望你能明白：\n	• HTTP通信存在什么问题\n	• HTTPS如何改进HTTP存在那些问题\n	• HTTPS工作原理是什么\n想阅读更多优质文章请猛戳GitHub博客,一年五十篇优质文章等着你！\n', 0, 5, 28, 0, '2021-12-24 15:46:52', '2021-12-15 15:16:30', 0);
INSERT INTO `article` VALUES (45, 'TEst', 'qi-xiao-gu', NULL, '强强强强强强强强强强强强钱钱钱钱钱钱钱', 0, 0, 11, 0, '2021-12-18 09:50:31', '2021-12-14 14:08:26', 0);
INSERT INTO `article` VALUES (46, '哈哈哈哈哈哈哈哈哈', 'qi-xiao-gu', NULL, '### 啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊\n\n啊啊啊啊啊啊啊啊啊啊啊啊aaaaaaa', 0, 0, 11, 0, '2021-12-18 09:50:35', '2021-12-14 14:03:02', 0);
INSERT INTO `article` VALUES (47, 'Vur', 'qi-xiao-gu', NULL, '123123123123123\n13123123123', 0, 0, 14, 0, '2021-12-24 16:12:28', '2021-12-14 13:43:44', 0);
INSERT INTO `article` VALUES (48, 'vueeeeeeeeeeeeeeeeeeee', 'qi-xiao-gu', NULL, 'xcccccccccccccccccccccccccccccccccccccccccccccccccccccc', 0, 0, 9, 0, '2021-12-19 10:31:13', '2021-12-14 13:53:01', 0);
INSERT INTO `article` VALUES (49, 'xxx', 'qi-xiao-gu', NULL, 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 0, 14, 32, 0, '2021-12-24 16:00:20', '2021-12-15 16:13:47', 1);
INSERT INTO `article` VALUES (50, 'TEst', 'qi-xiao-gu', NULL, 'asdf', 0, 4, 8, 0, '2021-12-14 14:03:05', '2021-12-14 14:03:05', 0);
INSERT INTO `article` VALUES (51, '123123asdf', 'qi-xiao-gu', NULL, 'asdf', 0, 4, 17, 0, '2021-12-24 16:12:49', '2021-12-15 15:56:08', 0);
INSERT INTO `article` VALUES (52, '还好我现在', 'qi-xiao-gu', NULL, '人大', 0, 5, 10, 0, '2021-12-24 16:12:45', '2021-12-15 15:16:41', 0);
INSERT INTO `article` VALUES (53, '还好我现在', 'qi-xiao-gu', NULL, '人大', 0, 5, 9, 0, '2021-12-18 11:33:12', '2021-12-14 14:23:28', 0);
INSERT INTO `article` VALUES (54, '还好我现在', 'qi-xiao-gu', NULL, '人大', 0, 5, 1, 1, '2021-12-14 14:03:46', '2021-12-14 14:03:46', 0);
INSERT INTO `article` VALUES (55, '不想做一', 'qi-xiao-gu', NULL, '永远永远', 0, 3, 1, 1, '2021-12-14 14:22:34', '2021-12-14 14:22:34', 0);
INSERT INTO `article` VALUES (56, '不想做一', 'qi-xiao-gu', NULL, '永远永远', 0, 3, 28, 0, '2021-12-24 16:05:27', '2021-12-15 16:13:33', 0);
INSERT INTO `article` VALUES (57, '不想做一', 'qi-xiao-gu', NULL, '永远永远', 0, 3, 33, 0, '2021-12-19 10:37:16', '2021-12-15 16:06:04', 0);
INSERT INTO `article` VALUES (58, '不想做一', 'qi-xiao-gu', NULL, '永远永远', 0, 3, 1, 1, '2021-12-14 14:22:36', '2021-12-14 14:22:36', 0);
INSERT INTO `article` VALUES (59, '不想做一', 'qi-xiao-gu', NULL, '永远永远', 0, 3, 1, 1, '2021-12-14 14:22:38', '2021-12-14 14:22:38', 0);
INSERT INTO `article` VALUES (60, '不想做一', 'qi-xiao-gu', NULL, '永远永远', 0, 3, 8, 0, '2021-12-19 10:31:08', '2021-12-14 14:23:32', 0);
INSERT INTO `article` VALUES (61, '一样一样', 'qi-xiao-gu', NULL, '哈哈哈哈h', 0, 4, 8, 0, '2021-12-24 16:12:36', '2021-12-14 14:24:02', 0);
INSERT INTO `article` VALUES (62, '一样一样', 'qi-xiao-gu', NULL, '哈哈哈哈h', 0, 4, 6, 0, '2021-12-18 11:38:57', '2021-12-14 14:24:05', 0);
INSERT INTO `article` VALUES (63, '一样一样', 'qi-xiao-gu', NULL, '哈哈哈哈h', 0, 4, 13, 0, '2021-12-19 10:34:59', '2021-12-15 15:16:44', 0);
INSERT INTO `article` VALUES (64, '随便写点啥', 'qi-xiao-gu', '![image](http://192.168.1.101:8000/image-store/98016c28737fa55e774ec676fd970bb3)\n啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊爱爱啊爱爱啊哎就叫你呢\neval(\'alert(1)\');', '![image](http://192.168.1.101:8000/image-store/98016c28737fa55e774ec676fd970bb3)\n啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊爱爱啊爱爱啊哎就叫你呢\neval(\'alert(1)\');', 0, 10, 188, 0, '2021-12-29 13:50:01', '2021-12-16 13:28:40', 0);
INSERT INTO `article` VALUES (65, '安安', 'qi-xiao-gu', '说谢谢谢谢', '说谢谢谢谢', 0, 8, 1, 1, '2021-12-16 13:33:43', '2021-12-16 13:33:43', 0);

-- ----------------------------
-- Table structure for article_category
-- ----------------------------
DROP TABLE IF EXISTS `article_category`;
CREATE TABLE `article_category`  (
  `id` int(0) NOT NULL,
  `article_id` int(0) DEFAULT NULL,
  `category_id` int(0) DEFAULT NULL,
  `update_time` datetime(0) DEFAULT NULL,
  `create_time` datetime(0) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for article_tag
-- ----------------------------
DROP TABLE IF EXISTS `article_tag`;
CREATE TABLE `article_tag`  (
  `id` int(0) NOT NULL,
  `article_id` int(0) DEFAULT NULL,
  `tags_id` int(0) DEFAULT NULL,
  `update_time` datetime(0) DEFAULT NULL,
  `create_time` datetime(0) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `parent_id` int(0) DEFAULT NULL,
  `sort` int(0) DEFAULT NULL,
  `update_time` datetime(0) DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `create_time` datetime(0) DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `deleted` int(10) UNSIGNED ZEROFILL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 16 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO `category` VALUES (1, 'HTML', 12, 10, '2021-12-16 22:04:15', '2021-12-16 22:04:15', 0000000000);
INSERT INTO `category` VALUES (2, 'CSS', 12, 20, '2021-12-16 22:04:21', '2021-12-16 22:04:21', 0000000000);
INSERT INTO `category` VALUES (3, 'JavaScript', 12, 30, '2021-12-16 22:04:19', '2021-12-16 22:04:19', 0000000000);
INSERT INTO `category` VALUES (4, 'HTTP', 13, 40, '2021-12-16 22:04:25', '2021-12-16 22:04:25', 0000000000);
INSERT INTO `category` VALUES (5, 'VUE', 11, 50, '2021-12-16 22:04:27', '2021-12-16 22:04:27', 0000000000);
INSERT INTO `category` VALUES (6, 'React', 11, 60, '2021-12-16 22:04:29', '2021-12-16 22:04:29', 0000000000);
INSERT INTO `category` VALUES (7, 'Angular', 11, 70, '2021-12-16 22:04:31', '2021-12-16 22:04:31', 0000000000);
INSERT INTO `category` VALUES (8, '算法', 0, 80, '2021-12-16 22:04:33', '2021-12-16 22:04:33', 0000000000);
INSERT INTO `category` VALUES (9, '其他', 0, 90, '2021-12-16 22:04:40', '2021-12-16 22:04:40', 0000000000);
INSERT INTO `category` VALUES (10, '工程化', 0, 100, '2021-12-16 22:04:42', '2021-12-16 22:04:42', 0000000000);
INSERT INTO `category` VALUES (11, '前端框架', -1, NULL, '2021-12-11 12:15:02', '2021-12-11 12:15:02', 0000000000);
INSERT INTO `category` VALUES (12, '前端基础', -1, NULL, '2021-12-11 12:15:05', '2021-12-11 12:15:05', 0000000000);
INSERT INTO `category` VALUES (13, '网络基础', -1, NULL, '2021-12-11 12:15:07', '2021-12-11 12:15:07', 0000000000);
INSERT INTO `category` VALUES (14, 'Demos', 9, 110, '2021-12-16 22:04:54', '2021-12-16 22:04:54', 0000000000);
INSERT INTO `category` VALUES (15, '生活体会', 0, 31, '2021-12-16 22:05:55', '2021-12-16 22:05:55', 0000000000);

-- ----------------------------
-- Table structure for comments
-- ----------------------------
DROP TABLE IF EXISTS `comments`;
CREATE TABLE `comments`  (
  `id` int(0) NOT NULL,
  `username` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `email` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `article_id` int(0) DEFAULT NULL,
  `article_name` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `update_time` datetime(0) DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `create_time` date DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for global_comments
-- ----------------------------
DROP TABLE IF EXISTS `global_comments`;
CREATE TABLE `global_comments`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `username` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `message` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `likes` int(10) UNSIGNED ZEROFILL DEFAULT NULL,
  `ip` varchar(12) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `update_time` datetime(0) DEFAULT NULL,
  `create_time` datetime(0) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 73 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of global_comments
-- ----------------------------
INSERT INTO `global_comments` VALUES (1, '哇哈哈', '博主是个大帅逼', 0000001000, 'USA', '2021-12-11 16:43:52', '2021-12-11 16:43:58');
INSERT INTO `global_comments` VALUES (2, '友人2', 'yyds', 0000000124, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (3, '友人3', 'yyds', 0000000126, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (4, '友人4', 'yyds', 0000000128, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (5, '友人5', 'yyds', 0000000130, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (6, '友人6', 'yyds', 0000000132, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (7, '友人7', 'yyds', 0000000134, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (8, '友人8', 'yyds', 0000000136, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (9, '友人9', 'yyds', 0000000138, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (10, '友人10', 'yyds', 0000000140, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (11, '友人11', 'yyds', 0000000142, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (12, '友人12', 'yyds', 0000000144, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (13, '友人13', 'yyds', 0000000146, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (14, '友人14', 'yyds', 0000000148, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (15, '友人15', 'yyds', 0000000150, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (16, '友人16', 'yyds', 0000000152, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (17, '友人17', 'yyds', 0000000154, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (18, '友人18', 'yyds', 0000000156, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (19, '友人19', 'yyds', 0000000158, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (20, '友人20', 'yyds', 0000000160, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (21, '友人21', 'yyds', 0000000162, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (22, '友人22', 'yyds', 0000000164, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (23, '友人23', 'yyds', 0000000166, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (24, '友人24', 'yyds', 0000000168, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (25, '友人25', 'yyds', 0000000170, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (26, '友人26', 'yyds', 0000000172, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (27, '友人27', 'yyds', 0000000174, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (28, '友人28', 'yyds', 0000000176, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (29, '友人29', 'yyds', 0000000178, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (30, '友人30', 'yyds', 0000000180, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (31, '友人31', 'yyds', 0000000182, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (32, '友人32', 'yyds', 0000000184, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (33, '友人33', 'yyds', 0000000186, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (34, '友人34', 'yyds', 0000000188, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (35, '友人35', 'yyds', 0000000190, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (36, '友人36', 'yyds', 0000000192, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (37, '友人37', 'yyds', 0000000194, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (38, '友人38', 'yyds', 0000000196, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (39, '友人39', 'yyds', 0000000198, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (40, '友人40', 'yyds', 0000000200, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (41, '友人41', 'yyds', 0000000202, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (42, '友人42', 'yyds', 0000000204, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (43, '友人43', 'yyds', 0000000206, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (44, '友人44', 'yyds', 0000000208, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (45, '友人45', 'yyds', 0000000210, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (46, '友人46', 'yyds', 0000000212, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (47, '友人47', 'yyds', 0000000214, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (48, '友人48', 'yyds', 0000000216, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (49, '友人49', 'yyds', 0000000218, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (50, '友人50', 'yyds', 0000000220, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (51, '友人51', 'yyds', 0000000222, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (52, '友人52', 'yyds', 0000000224, NULL, NULL, NULL);
INSERT INTO `global_comments` VALUES (53, NULL, NULL, NULL, NULL, '2021-12-12 05:20:31', '2021-12-12 05:20:31');
INSERT INTO `global_comments` VALUES (54, NULL, NULL, NULL, NULL, '2021-12-12 05:20:52', '2021-12-12 05:20:52');
INSERT INTO `global_comments` VALUES (55, 'Nobody', NULL, NULL, NULL, '2021-12-12 05:36:33', '2021-12-12 05:36:33');
INSERT INTO `global_comments` VALUES (56, 'Nobody', NULL, NULL, NULL, '2021-12-12 05:38:56', '2021-12-12 05:38:56');
INSERT INTO `global_comments` VALUES (57, 'Nobody', '听君一席话 如听一席话', NULL, '', '2021-12-12 05:40:58', '2021-12-12 05:40:58');
INSERT INTO `global_comments` VALUES (58, 'Nobody', '听君一席话 如听一席话', NULL, '', '2021-12-12 09:51:06', '2021-12-12 09:51:06');
INSERT INTO `global_comments` VALUES (59, 'Nobody', '君问归期未有期111', NULL, '', '2021-12-13 12:52:57', '2021-12-13 12:52:57');
INSERT INTO `global_comments` VALUES (60, 'Nobody', '君问归期未有期', NULL, '', '2021-12-13 14:43:27', '2021-12-13 14:43:27');
INSERT INTO `global_comments` VALUES (61, 'Nobody', '巴山夜雨', NULL, '', '2021-12-13 14:43:48', '2021-12-13 14:43:48');
INSERT INTO `global_comments` VALUES (62, 'Nobody', '<script>alter(1)</script>', NULL, '', '2021-12-13 15:01:42', '2021-12-13 15:01:42');
INSERT INTO `global_comments` VALUES (63, 'Nobody', '君问归期未有期', NULL, '', '2021-12-13 15:19:47', '2021-12-13 15:19:47');
INSERT INTO `global_comments` VALUES (64, 'Nobody', '君问归期未有期', NULL, '', '2021-12-14 12:02:19', '2021-12-14 12:02:19');
INSERT INTO `global_comments` VALUES (65, 'Nobody', '君问归期未有期1111', NULL, '', '2021-12-14 12:02:23', '2021-12-14 12:02:23');
INSERT INTO `global_comments` VALUES (66, 'Nobody', '君问归期未有期', NULL, '', '2021-12-14 14:33:33', '2021-12-14 14:33:33');
INSERT INTO `global_comments` VALUES (67, 'Nobody', '君问归期未有期', NULL, '', '2021-12-14 16:38:56', '2021-12-14 16:38:56');
INSERT INTO `global_comments` VALUES (68, 'Nobody', 'jjjjjjjjjjjjjjjjjjjjjjjjjjjjj', NULL, '', '2021-12-14 16:39:02', '2021-12-14 16:39:02');
INSERT INTO `global_comments` VALUES (69, 'Nobody', 'yyyyyyyyydddsss', NULL, '', '2021-12-15 14:43:56', '2021-12-15 14:43:56');
INSERT INTO `global_comments` VALUES (70, 'Nobody', '君问归期未有期', NULL, '', '2021-12-16 14:14:11', '2021-12-16 14:14:11');
INSERT INTO `global_comments` VALUES (71, 'Nobody', '天下谁人不识君', NULL, '', '2021-12-16 14:14:25', '2021-12-16 14:14:25');
INSERT INTO `global_comments` VALUES (72, 'Nobody', '君问归期未有期1111', NULL, '', '2021-12-18 12:04:32', '2021-12-18 12:04:32');

-- ----------------------------
-- Table structure for organization
-- ----------------------------
DROP TABLE IF EXISTS `organization`;
CREATE TABLE `organization`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `update_time` datetime(0) DEFAULT NULL,
  `create_time` datetime(0) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for organization_role
-- ----------------------------
DROP TABLE IF EXISTS `organization_role`;
CREATE TABLE `organization_role`  (
  `id` int(0) NOT NULL,
  `organization_id` int(0) DEFAULT NULL,
  `role_id` int(0) DEFAULT NULL,
  `update_time` datetime(0) DEFAULT NULL,
  `create_time` datetime(0) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for resource
-- ----------------------------
DROP TABLE IF EXISTS `resource`;
CREATE TABLE `resource`  (
  `id` int(0) NOT NULL,
  `type` int(0) DEFAULT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `father_id` int(0) DEFAULT NULL,
  `icon` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `path` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `sort` int(0) DEFAULT NULL,
  `update_time` datetime(0) DEFAULT NULL,
  `create_time` datetime(0) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for role
-- ----------------------------
DROP TABLE IF EXISTS `role`;
CREATE TABLE `role`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `update_time` datetime(0) DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `create_time` datetime(0) DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for role_resource
-- ----------------------------
DROP TABLE IF EXISTS `role_resource`;
CREATE TABLE `role_resource`  (
  `id` int(0) NOT NULL,
  `role_id` int(0) DEFAULT NULL,
  `resource_id` int(0) DEFAULT NULL,
  `update_time` datetime(0) DEFAULT NULL,
  `create_time` datetime(0) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for tags
-- ----------------------------
DROP TABLE IF EXISTS `tags`;
CREATE TABLE `tags`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `update_time` datetime(0) DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `create_time` datetime(0) DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for token
-- ----------------------------
DROP TABLE IF EXISTS `token`;
CREATE TABLE `token`  (
  `id` int(0) NOT NULL,
  `token` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `create_time` datetime(0) DEFAULT NULL,
  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of token
-- ----------------------------
INSERT INTO `token` VALUES (1, 'asdf', '2021-12-16 22:17:49', 'qixiaogu');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `username` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `psd` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `email` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `gender` int(0) DEFAULT NULL,
  `mobile` varchar(11) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `avator` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `update_time` datetime(0) DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `create_time` datetime(0) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `user_id_uindex`(`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES (1, 'qixiaogu', 'admin#123', '1436667237@qq.com', 1, '1751257801', NULL, NULL, NULL);
INSERT INTO `user` VALUES (2, 'Jane', '122222', NULL, NULL, NULL, NULL, '2021-12-04 12:11:47', '2021-12-04 12:11:47');
INSERT INTO `user` VALUES (3, 'Jane2', '122222', NULL, NULL, NULL, NULL, '2021-12-04 12:12:19', '2021-12-04 12:12:19');
INSERT INTO `user` VALUES (4, 'Jane3', '122222', NULL, NULL, NULL, NULL, '2021-12-04 12:14:56', '2021-12-04 12:14:56');
INSERT INTO `user` VALUES (5, 'Jane4', '122222', NULL, NULL, NULL, NULL, '2021-12-04 12:20:57', '2021-12-04 12:20:57');
INSERT INTO `user` VALUES (6, 'Jane5', '122222', NULL, NULL, NULL, NULL, '2021-12-04 12:21:08', '2021-12-04 12:21:08');

-- ----------------------------
-- Table structure for user_role
-- ----------------------------
DROP TABLE IF EXISTS `user_role`;
CREATE TABLE `user_role`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `user_id` int(0) DEFAULT NULL,
  `role_id` int(0) DEFAULT NULL,
  `update_time` datetime(0) DEFAULT NULL,
  `create_time` datetime(0) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for visitor
-- ----------------------------
DROP TABLE IF EXISTS `visitor`;
CREATE TABLE `visitor`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `ip` varchar(15) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `location` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `create_time` datetime(0) DEFAULT NULL,
  `update_time` datetime(0) DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of visitor
-- ----------------------------
INSERT INTO `visitor` VALUES (1, '123', 'vs', '2021-11-30 20:28:05', '2021-12-20 14:41:56');
INSERT INTO `visitor` VALUES (2, '223.167.168.195', '上海市', '2021-12-20 14:49:47', '2021-12-29 13:51:51');
INSERT INTO `visitor` VALUES (3, '23.142.224.239', '国内未能识别的地区', '2021-12-21 10:41:55', '2021-12-21 10:45:11');

SET FOREIGN_KEY_CHECKS = 1;
